<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chunni&#39;s blog</title>
    <link>https://chunni98.github.io/</link>
    <description>Recent content on Chunni&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 春泥</copyright>
    <lastBuildDate>Sun, 05 Mar 2023 22:48:06 +0800</lastBuildDate><atom:link href="https://chunni98.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简单通用链表 demo</title>
      <link>https://chunni98.github.io/posts/learn-linux-list/</link>
      <pubDate>Sun, 05 Mar 2023 22:48:06 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/learn-linux-list/</guid>
      <description>以下是参考Linux链表实现的简易通用链表，目前水平有限，只能理解大概思想，做一个玩具 demo：
后续继续学习后再做补充。
klist.h
#ifndef _KLINK_LIST #define _KLINK_LIST /**************************************************************************** * @file : incl/klinklist.h * @brief : 通用链表 * @author : shachi * @email : shachi1758@outlook.com * @details : * @version : 0.1.0 * @history : * 2023-03-02 16:29:52 创建文件 * 2023-03-05 15:11:19 实现初始化、头插法。 ****************************************************************************/ #include &amp;lt;stdint.h&amp;gt; #include &amp;lt;stddef.h&amp;gt; /** * @brief 通用头节点 */ struct klist_head{ struct klist_head *prev; struct klist_head *next; }; /** * @brief: 通用链表初始化 * @param1: l，链表头 * * 前驱和后继都指向自己。 * */ inline void klist_init(struct klist_head *head) { head-&amp;gt;next = head; head-&amp;gt;prev = head; } /** * @brief: 头插法插入节点 * @param1: new，要插入的节点 * @param2: l，要插入的链表 * * @return: -1，插入失败 * 0，插入成功 * */ int32_t klist_add(struct klist_head *new,struct klist_head *head); /** * @brief: 删除节点。 * @param1: head，待删除的节点。 * * 删除链表上的节点，只是从链表中删除，不会释放空间。 * * @return: -1 失败 * 0 成功 */ int32_t klist_del(struct klist_head *head); #endif // _KLINK_LIST klist.</description>
    </item>
    
    <item>
      <title>C 简易编程规范</title>
      <link>https://chunni98.github.io/posts/cjmyibmiggvfj/</link>
      <pubDate>Sun, 26 Feb 2023 16:18:10 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/cjmyibmiggvfj/</guid>
      <description>前言 1 编码 1.1 排版 1.2 命名 1.3 头文件防卫式声明 1.4 函数 1.5 其他 2 注释 2.1 条件编译 2.2 TODO 注释 2.3 文件头注释 2.4 函数注释 2.5 结构体注释 2.6 变量注释 3 参考 前言 C 语言学习之路，道阻且跻，为了不让我自己写代码时轻易迷失在指针和函数的海洋以及提高自己编程的质量和效率，我收集了一些资料，整理归纳并稍作修改，整理出这篇编程规范和注释风格，希望自己能好好遵守，以后写出越来越容易理解和阅读的代码。
操作系统：ubuntu18.04
编辑器：Vim 8.0
1 编码 1.1 排版 缩进为 4 个空格。 每行不超过 80 列。 文件用UTF-8 编码。 括号采用K &amp;amp; R 风格。 逗号、分号在后面加空格。 比较操作符，赋值操作符、算术操作符、逻辑操作符、位域操作符等双目操作符的前后加空格。 取反、异或、自增、自减、取地址等单目操作符前后不加空格。 -&amp;gt;、. 前后不加空格。 if、switch、else、for、do、while 等关键字后要加一个空格。 不要在小括号里的表达式两侧加空格。 表达式换行要保持换行的一致性，操作符放行末。 1.2 命名 变量：全小写，_ 分隔。 文件：全小写，_ 分隔。 宏：全大写，_分隔。 goto 标签：和宏一致。 常量：k 开头，大小写混合。如：const int kDaysInAWeek=7。 枚举元素：与常量或宏一致：kEnumName 或 ENUM_NAME。 函数： 动作类函数使用动宾结构：add_user()。 判断型函数：is_working()。 数据型函数：get_loacal_count()。 tyepdef 自定义类型：加 _t 后缀。 静态变量：加 s_前缀。 全局变量：加 g_前缀。 bool 变量：加 b_前缀。 指针变量：加 p_ 前缀。 较短的单词可通过去掉“元音”形成缩写；较长的单词可取单词的头几个字母形成缩写，避免使人产生误解。 _ 开头的函数或变量用来命名不希望被外部调用的函数（静态函数）、特殊变量。 1.</description>
    </item>
    
    <item>
      <title>简易 C 日志宏</title>
      <link>https://chunni98.github.io/posts/my-logger/</link>
      <pubDate>Fri, 24 Feb 2023 12:50:26 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/my-logger/</guid>
      <description>klogger.h
#ifndef _SHACHI_LOGGER_H #define _SHACHI_LOGGER_H // \brief : 自定义的日志宏，以供调试。 // \author : shachi // \email : shachi1758@outlook.com // \details : 定义宏 NDEBUG 关闭。 // \version : 0.1.0 // \log : // 2023-02-24 09:53:10 创建文件 // 日志模块开关 #ifndef NDEBUG #include &amp;lt;time.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #define COLOR_RED &amp;#34;\033[1;31m&amp;#34; #define COLOR_BLUE &amp;#34;\033[1;34m&amp;#34; #define COLOR_NONE &amp;#34;\033[0m&amp;#34; #define KINFO(fmt, args...)\ do{\ time_t t;\ struct tm *ti;\ time(&amp;amp;t);\ ti = localtime(&amp;amp;t);\ printf(&amp;#34;%d-%d-%d %d:%d:%d &amp;#34;,ti-&amp;gt;tm_year + 1900,ti-&amp;gt;tm_mon+1,ti-&amp;gt;tm_mday,ti-&amp;gt;tm_hour,ti-&amp;gt;tm_min,ti-&amp;gt;tm_sec);\ printf(&amp;#34;[%s:%d-&amp;gt;%s] &amp;#34;, __FILE__,__LINE__,__func__);\ printf(COLOR_BLUE &amp;#34;INFO:&amp;#34; COLOR_NONE);\ printf(fmt, ##args);\ }while(0) #define KERROR(fmt, args.</description>
    </item>
    
    <item>
      <title>How to Write Mermaid</title>
      <link>https://chunni98.github.io/posts/how-to-write-mermaid/</link>
      <pubDate>Tue, 21 Feb 2023 21:47:47 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/how-to-write-mermaid/</guid>
      <description>1 节点 2 文本节点 3 图 4 方向 5 节点形状 5.1 圆角矩形 5.2 体育场节点 5.3 子程序 5.4 数据库 5.5 圆形 5.6 不对称节点 5.7 菱形 5.8 六边形 5.9 平行四边形 5.10 梯形 5.11 双圆 6 节点之间的连接 6.1 箭头线 6.2 无箭头的链接 6.3 带文本的链接 6.4 带文本的箭头 6.5 虚线箭头 6.6 带文本的虚线 6.7 粗体链接 6.8 粗体带文本 6.9 连接链 6.10 新箭头 6.11 双向箭头 6.12 添加更多的短划线让链接更长 7 特殊字符 8 子图 8.2 子图之间的连接 8.3 子图的方向 1 节点 flowchart LR 这是一个描述性文本 2 文本节点 flowchart LR id[这是一个文本节点] 3 图 graph TD start --&amp;gt; stop 4 方向 TB BT RL LR 5 节点形状 5.</description>
    </item>
    
    <item>
      <title>一次难忘的装机经历</title>
      <link>https://chunni98.github.io/posts/yicinjwhdevljijkli/</link>
      <pubDate>Mon, 10 Oct 2022 21:15:04 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/yicinjwhdevljijkli/</guid>
      <description>前言 0 准备 1 装机 2 安装操作系统 2.1 操作系统的选择 2.2 安装过程 3 配置操作系统以及安装配置 wsl2 3.1 配置操作系统 3.2 安装配置 wsl2 4 其他软件的安装 5 总结 前言 我的 Laptop 被我拆坏了，小花的 Laptop 实在难用，win10 都装不了，装了个 ubuntu 勉强能用，但是老是死机，国庆假期没事做，心血来潮，就组了一台自己的 PC。
0 准备 CPU： intel i712700，8（性能核） + 4（能效核） 核，20 线程，集成显卡：英特尔® 超核芯显卡 770
主板： Asus TUF-GAMING-B660M-PLUS-WIFI-D4
显示器： ENVISION E27Q56
电源： CoolerMaster GX 550W，GOLD、全模组
机箱： Jonsbo D30 黑色
音箱： Lenovo USB 长条音箱 BMS09
SSD： Kingston NV2 PCIe 4.0 NVMe SSD，500 GB</description>
    </item>
    
    <item>
      <title>开始学习 Python 和 Flutter </title>
      <link>https://chunni98.github.io/posts/learn-python-and-flutter/</link>
      <pubDate>Thu, 29 Sep 2022 13:36:23 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/learn-python-and-flutter/</guid>
      <description>本月初，一个小学同学（现在是中学信息技术老师）求助我为她做一个 Python 项目，她想拿去和学生一起参加学校的编程比赛，自从她当上中学老师后每年都要来问我一遍，至今已经是第三次了。但此前我不会 Python，我也爱莫能助。不过这次她来问我，我有点兴趣了，我最近被生活压得喘不过气来，正在寻找改变的途径，我就想，借着这个契机，把 Python 学了吧。我虽然现在并没有从事程序开发相关的工作，但是我从来没放弃过对计算机业界的关注，据我的了解，Python 目前已经是最流行的编程语言。
截至写这篇文章的当天，Tiobe 排行榜上 Pyhton 仍然以 15.74% 的市场份额高居第一，并且增长率高达 4.07% ：
无论是作为主要开发语言还是辅助工具，Python 都完全可以胜任，在 2022 年，作为一个开发者，去学习 Python 是百利而无一害的，无论是做 Web 开发还是数据分析、编写脚本，Python 都能胜任，而且可以做得很好。
我不想盲目学习，学习之后我得用 Python 做个东西出来，这样才好把握自己学习的方向。我参考了 JetBrains 的2021 年开发者生态系统现状：
我打算用 Python 做一个应用，Pyhton 作为后台，框架选择 FastApi（Django 实在太笨重了，不想学），前端的话，就选择 Flutter ，我实在不喜欢用 Javascript，我喜欢 Flutter 的口号： “为所有屏幕创造精彩”。只不过使用 Flutter 的话也是需要从头学习，还好现在 Flutter 的生态好了很多了，学习资源也不算难找。同时学习两个技术，比较着学速度应该快点。我选择的都是比较新的技术，毕竟只是个人小项目，新框架做起来更快，更有新鲜感和成就感，当然，某种程度上也更有挑战性（生态不成熟）。
道阻且长，还需努力啊。学习 Python 的过程中，脑袋里有很多想法，我觉得都很有趣，我会努力实现它们。
留言或评论请使用 Github Issues。</description>
    </item>
    
    <item>
      <title>Stories</title>
      <link>https://chunni98.github.io/stories/</link>
      <pubDate>Wed, 08 Jun 2022 22:46:58 +0800</pubDate>
      
      <guid>https://chunni98.github.io/stories/</guid>
      <description>人的一生中，最光辉的一天并非是功成名就那天，而是从悲叹与绝望中产生对人生的挑战，以勇敢迈向意志那天。
——福楼拜《福楼拜文学书简》
穷人在十字街头耍十把钢勾，勾不着亲人骨肉；
富人在深山老林抡刀枪棍棒，打不散无义的宾朋；
大将军手中枪，翻江倒海挡不住饥寒穷三个字。
—— [中] 郭德纲
反正活着，一切也不会有所改变。虽然不具有特异功能，不过大致上可以知道，今后的社会或自己会发生什么样的事。「将来！将来！」，就算这句话再怎么有说服力都没用。你的人生，大概是在出生地念小学和中学，上补习班为联考读书，然后进入一所高中或大学就读，浑浑噩噩玩了四年后进入某家公司上班工作。男性的话二十来岁三十岁前结婚，隔年生子，几次的工作异动或升迁，最高升到经理职位，六十岁退休，之后的十年或二十年过着享受自己兴趣的生活，最后死亡。顶多就是这样。而且，令人绝望的，这竟是最能让人安心的理想人生。
在这样的状况下，平凡活着已经再也没什么重大意义了。假使不是现在活着，或许只是像做烤鸡用的嫩鸡一样，「被给予生命活着」而已。所以在适当的地方为人生画上休止符，并不是「悲伤不已」、「不会发生第二次」、「担心会出现波及效应」这类的问题。
自杀是相当积极的行为。
—— [日] 鶴見 済《完全自殺マニュアル》
民族主义只教会了你去恨你连见都没见过的人，你从未参与过的那些成就，一下子就让你骄傲自豪起来了。你到处吹牛，就像有些美国人：「去他妈的法国人！要不是我们两次世界大战都救了他们，他们现在得说德语了」。你心想：「哦哦，那是我们的功劳吗？我们？你，和我？汤米，矮马，我俩救了法国人吗？」
你站起来挥舞着你的旗帜，高谈阔论你的种族身份，民族身份，说你有多自豪。跟你有半毛钱关系吗？你这个废物！因为你就是历史上的那些伟大的英雄之一吗？所以你才站那挥舞着你的旗子吗？不不，你并不是，你自我归类于这个群体，因为你个人本身毫无贡献价值，可悲至极。
我从来都无法理解种族或者民族主义自豪感，因为我觉得，自豪感应该是留给你自己获得的成就，而不是为你出生就意外获得的东西而骄傲。「我是爱尔兰人」并不是一门技能啊，而是一场基因意外。你不会说「我一米八我很自豪」，「我有易患肠癌的倾向我很骄傲」。所以为啥要为是爱尔兰人而骄傲，或者意大利人、美国人或者任何人。你要是很幸福的话倒没问题，用这个词吧，说幸福，「作为美国人我很幸福」。请幸福，不要骄傲，骄傲自豪已经太多了。「骄傲在跌倒之前」，勿忘箴言。
—— youtube
我深怕自己本非美玉，故而不敢加以刻苦琢磨，却又半信自己是块美玉，故又不肯庸庸碌碌，与瓦砾为伍。于是我渐渐地脱离凡尘，疏远世人，结果便是一任愤懑与羞恨日益助长内心那怯弱的自尊心。其实，任何人都是驯兽师，而那野兽，无非就是各人的性情而已。
—— [日] 中岛敦《山月记》
明日死ぬとしたら生き方が変わるんですか？
あなたの今の生き方は、どれくらい生きるつもりの生き方なんですか？
如果明天就要死了,你会因此改变现在的生活吗?
那你如今这种活法到底是打算活到几岁的活法呢?
——伊坂幸太郎《末日的愚者》
螃蟹在剥我的壳，笔记本在写我
漫天的我落在枫叶上雪花上
而你在想我
——武汉大学“三行情书”比赛。
あなたの颜にそっくりな息子を
想把和你长得很像的儿子
性格もそっくりに育てたい
培育出你一样的性格
そしたら私みたいな幸せ者がもうひとり出来るかな。
这样又会多一个人和我一样幸运。
—— 日本“三行情书”比赛（兵库县 女性 24岁）
人最宝贵的东西是生命。生命对人来说只有一次。因此，人的一生应当这样度过：当一个人回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞愧；这样，在他临死的时候，能够说，我把整个生命和全回部精力都献给了人生最答宝贵的事业——为人类的解放而奋斗。
—— [苏] 奥斯特洛夫斯基《钢铁是怎样练成的》
事实上，车站比婚礼殿堂见证了更多真挚的亲吻，医院的墙壁比教堂聆听了更多的祷告。
—— 无名氏
永远不要相信苦难是值得的，苦难就是苦难，苦难不会带来成功，苦难不值得追求，磨练意志是因为苦难无法躲开。
—— [中] 余华《活着》
对于那些没有想象力的人来说，保持常态就是他们的理想。
——荣格
若批评不自由，则赞美无意义。
——博马舍《费加罗的婚礼》
“法律面前人人平等”的前提是双方的地位一样。
—— 无名氏
所谓‘理解精髓就好’只是个美好的愿望，那是机会主义者让自己更安心的理由。
—— [日] 奥野宣之《如何行之有效地阅读一本书》
当下的中国影视作品中已经丧失了文化的多元化，只有一种文化，就是中产文化。
—— [中] 戴锦华</description>
    </item>
    
    <item>
      <title>文档书写规范</title>
      <link>https://chunni98.github.io/posts/how-to-write-document/</link>
      <pubDate>Tue, 31 May 2022 21:59:37 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/how-to-write-document/</guid>
      <description>有研究顯示，打字的時候不喜歡在中文和英文之間加空格的人，感情路都走得很辛苦，有七成的比例會在 34 歲的時候跟自己不愛的人結婚，而其餘三成的人最後只能把遺產留給自己的貓。畢竟愛情跟書寫都需要適時地留白。
—— 為什麼你們就是不能加個空格呢？
前言 1 标题 2 文本 3 段落 4 其他 参考资料 前言 我希望自己写的文章都最少能够做到：可读性高、结构良好、条理清晰、风格统一，于是在参考了一些资料后整理了一份学习笔记，就当是自己的“文档书写规范”了，供自己今后参考。
1 标题 文档中使用标题最多不超过四级。
三级标题下建议使用如下结构：
**(1) xxx** **(2) xxx** **(3) xxx** (1) xxx
(2) xxx
(3) xxx
避免出现孤立编号。 标题名避免重复。 目录只显示二级标题、三级标题。 2 文本 全角中文字符与半角英文字符之间，应有一个半角空格。 全角中文字符与半角阿拉伯数字之间，应有一个半角空格，半角的百分号，视同阿拉伯数字。 数字与单位之间需要增加空格。 全角标点符号不用和半角符号之间留空格。 不使用全角空格。 不连续出现两个及以上空格。 中文使用全角标点。 区分“的”、“地”、“得”。 阿拉伯数字一律使用半角形式，不得使用全角形式。 数值为千位以上，应添加千分号（半角逗号）。 货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。 中文语句的标点符号，均应该采取全角符号， 句子末尾用括号加注时，句号应在括号之外。 英文句子中，并列词语之间使用半角逗号（,）分隔。 补充说明时，使用全角圆括号（（）），括号前后不加空格。 表示时间时，应使用半角冒号（:）。 句子内部表示并列，应使用全角顿号，并列词是英语也是如此。 3 段落 段落开头不建议缩进，顶格开始即可。 引用第三方内容时，应注明出处。 不连续出现两行及以上空行。 避免“一逗到底”。 4 其他 文件名不得含有空格。 建议使用空格键而不是 tab 键对齐。 不混用 tab 和空格。 一个 tab 为四个半角空格。 文档目录可以通过各级标题自动生成。 参考资料 阮一峰-中文技术文档的写作规范</description>
    </item>
    
    <item>
      <title>Markdown 语法测试</title>
      <link>https://chunni98.github.io/posts/markdown-syntax/</link>
      <pubDate>Sun, 29 May 2022 13:00:49 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/markdown-syntax/</guid>
      <description>前言 1 基本语法 1.1 标题 1.2 段落 1.3 换行 1.4 强调 1.5 引用 1.6 列表 1.7 代码 1.8 分割线 1.9 链接 1.10 图片 1.11 转义字符 1.12 内嵌 HTML 标签 2 扩展语法 2.1 表格 2.2 脚注 2.3 标题编号 2.4 todo list 2.5 其他 前言 前前后后搭建博客也有很多次了，静态网站生成器用过 hexo，vuepress，hugo，还是觉得 hugo 最好用：速度快、安装方便、跨平台、热更新，最重要的是使用起来比较简单。
之前使用 hugo 搭建博客，主题用过 even ，但感觉用的人太多了，用过时间比较久的是 loveit ，是个很不错的主题，中文文档也很全，使用起来很方便，但是现在我想要更简洁一点的主题，王垠 的博客主题我就觉得很不错，还有偶然间发现的无求备斋笔记 ，本来这次搭建博客是想用 无求备斋笔记 的样式，可是这个主题是基于 jekyll 的，我尝试用了用 jekyll ，感觉不太好用，不如 hugo，等以后有时间研究下怎么写主题，然后把它转换成 hugo 的模板吧，现在懒得折腾。在 github 上找了两个比较喜欢的主题：Fuji 和 Archie，最终我选择了Archie，因为它看起来更简洁一些。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://chunni98.github.io/about/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://chunni98.github.io/about/</guid>
      <description>自我介绍 只是一个普通的工人。
目标是成为一个优秀的工程师，能为创造更加美好的世界做出一点贡献。
邮箱：shachi1758@outlook.com
关于本站 本站使用 hugo 静态网站生成器构建，主题是：archie，使用 github pages 托管。
留言或评论请使用 Github Issues。</description>
    </item>
    
    <item>
      <title>伪代码书写规范</title>
      <link>https://chunni98.github.io/posts/how-to-write-pseudocode/</link>
      <pubDate>Sat, 23 Jan 2021 01:15:48 +0800</pubDate>
      
      <guid>https://chunni98.github.io/posts/how-to-write-pseudocode/</guid>
      <description>1 前言 2 伪代码书写规范 2.1 说明信息 2.2 注意事项 2.3 注释 2.4 变量 2.5 代数运算 2.6 分支/选择 2.7 循环/迭代 2.8 函数 3 实例 4 参考资料 1 前言 伪代码（英语： pseudocode），又称为虚拟代码，是高层次描述算法的一种方法。它不是一种现实存在的编程语言。它以编程语言的书写形式指明算法的职能。伪代码可以用于帮助人们理解解释代码的语法、规则、内涵和结构。 ——维基百科
本篇文章作为以后书写伪代码的规范。
2 伪代码书写规范 2.1 说明信息 首先在一开始写下伪代码的作用、目的和作者，日期等基本信息。例：
算法：KMP 算法的实现 作者：rong 时间：2021-01-01 20:34 Input: output: 2.2 注意事项 每行只写一条语句。 有效使用空白和缩进。 使用简单的术语。 描述清楚所有事物，但不要过度描述与主要问题无关的细节。 遇到难以用此规范表达的算法时，使用陈述句描述或借用语法。 2.3 注释 // 此为注释，注释使用 C++ 风格的注释 2.4 变量 变量名以单个字符为主，小写字母可以有多个，大写字母最好只有一个。
变量可以为整数、实数、字符、字符串 或 指针。
x ← 1 y ← 2 z ← 3 w ← y+1 a &amp;lt;-&amp;gt; b //交换 a 和 b 的值 2.</description>
    </item>
    
  </channel>
</rss>
