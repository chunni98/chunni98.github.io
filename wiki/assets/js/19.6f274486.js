(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{295:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_3-1-为什么栈空间很小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-为什么栈空间很小"}},[t._v("#")]),t._v(" 3.1 为什么栈空间很小？")]),t._v(" "),a("p",[t._v("C的栈在 "),a("code",[t._v("x86-64")]),t._v(" 上是直接绑定到CPU指令的，实现上极其精简，因此它与堆不同，没有动态增长、动态缩小的功能，一旦分配出来就会永远占用相应的空间。每个线程都会占用独立的栈空间，这样对于线程数很多的进程来说，如果栈空间分配得过多，就会很浪费内存空间。相反，堆空间可以一开始分配得很小，然后不停向上增长，释放相应的空间之后还可以归还给操作系统，因此适合处理比较大的空间。对于一定要占用比较大的栈空间的情况，可以指定栈空间大小。其他语言的栈并不一定是这样的，比如Python的栈就是假的，用堆空间模拟的，只有递归深度限制，而没有容量限制。")]),t._v(" "),a("h2",{attrs:{id:"_3-2-什么时候使用-short"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-什么时候使用-short"}},[t._v("#")]),t._v(" 3.2 什么时候使用 short？")]),t._v(" "),a("p",[t._v("通常 "),a("code",[t._v("int")]),t._v(" 设置为自然大小，是硬件处理效率最高的整数形式。")]),t._v(" "),a("p",[a("code",[t._v("short")]),t._v(" 在参与运算时会被转成 "),a("code",[t._v("int")]),t._v("，会影响处理"),a("code",[t._v("short")]),t._v("整型运算速度。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("C/C++")]),t._v("中，编译器对"),a("code",[t._v("int")]),t._v("类型数据的执行效率最高。一般在符合int条件的情况下优先选择int")]),t._v(" "),a("h2",{attrs:{id:"_3-3-unsigned-陷阱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-unsigned-陷阱"}},[t._v("#")]),t._v(" 3.3 unsigned 陷阱")]),t._v(" "),a("p",[t._v("有符号数和无符号数相加时，有符号数的类型被提升到无符号数，最高位符号位变成数据位。")]),t._v(" "),a("h2",{attrs:{id:"_3-4-形参设为-const-指针有什么好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-形参设为-const-指针有什么好处"}},[t._v("#")]),t._v(" 3.4 形参设为 const 指针有什么好处？")]),t._v(" "),a("p",[t._v("将形参设置为const将把形参限定为常量，使得我们不能修改它。")]),t._v(" "),a("p",[t._v("这样做的好处有2点：")]),t._v(" "),a("ul",[a("li",[t._v("第一，保证了实参不能被修改，增加了安全性。")]),t._v(" "),a("li",[t._v("第二，扩大了该函数的参数的接收范围，使得函数更具通用性")])]),t._v(" "),a("h2",{attrs:{id:"_3-5-scanf里的空白符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-scanf里的空白符"}},[t._v("#")]),t._v(" 3.5 scanf里的空白符")]),t._v(" "),a("p",[t._v("空白字符能匹配输入中任意数量的空白符，所以"),a("code",[t._v('scanf("\\n"）')]),t._v("里的 "),a("code",[t._v("\\n")]),t._v(" 能匹配任意数量的空白符。scanf会一直等待输入，直到输入非空白符为止。")]),t._v(" "),a("h2",{attrs:{id:"_3-6-floating-point-exception"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-floating-point-exception"}},[t._v("#")]),t._v(" 3.6 floating point exception")]),t._v(" "),a("p",[t._v("通常是逻辑错误，如对 0 取余。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("common_multiple")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int32_t")]),t._v(" r "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("kdebug")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"最小公因数：%d\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h2",{attrs:{id:"_3-7-c语言编写的程序在无操作系统的情况下运行时如何支持其堆栈空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-c语言编写的程序在无操作系统的情况下运行时如何支持其堆栈空间"}},[t._v("#")]),t._v(" 3.7 C语言编写的程序在无操作系统的情况下运行时如何支持其堆栈空间？")]),t._v(" "),a("p",[t._v("栈是一种CPU硬件支持的数据结构；通过CPU内部的栈寄存器SP就可以访问栈顶元素；使用push指令把数据压入栈，SP自动增加一个元素的偏移量。（对x86就是sp-2，因为x86的栈是反向增长）；使用pop从栈中弹出一个数据，SP自动减少一个元素的偏移量。")]),t._v(" "),a("h2",{attrs:{id:"_3-8-volatile-一般用处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-volatile-一般用处"}},[t._v("#")]),t._v(" 3.8 volatile 一般用处")]),t._v(" "),a("ol",[a("li",[t._v("存储器映射的硬件寄存器通常要加 volatile，因为每次读写可能有不同意义。")]),t._v(" "),a("li",[t._v("中断服务程序中修改的供其他程序检测的变量，因为在中断程序中被修改，main 函数中并未修改\n所以可能只从内存中读取一次放到寄存器中，后续只会从寄存器中读取变量副本，使得中断操作对变量的修改无用。")]),t._v(" "),a("li",[t._v("多任务环境下各任务间共享的标志，如在某个线程里，读取某个变量，编译器优化时有时会先把变量\n读取到寄存器中，如果当前线程没有修改变量值就一直从寄存器中读取，而如果该变量在别的线程改变了值后，寄存器里的值却并不会改变，从而造成读取变量值错误。")])]),t._v(" "),a("h2",{attrs:{id:"_3-9-为什么全局区要分为-bss-段-和-data-段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-为什么全局区要分为-bss-段-和-data-段"}},[t._v("#")]),t._v(" 3.9 为什么全局区要分为 bss 段 和 data 段？")]),t._v(" "),a("p",[t._v("bss 存储未初始化的全局变量，data 存储初始化的全局变量。")]),t._v(" "),a("p",[t._v("因为对于初始化的变量，所有的数据必须保存到目标文件中，在 os 加载程序的时候，复制到对应\n内存。")]),t._v(" "),a("p",[t._v("而未初始化的变量，编译器就不会在目标文件保存值，只需要记录一个字节数，告诉 os 多少个字节要在加载到内存的时候初始化为 0。")]),t._v(" "),a("p",[t._v("bss 段主要为了节省程序的目标文件或者可执行文件所占的磁盘空间。")]),t._v(" "),a("p",[t._v("注意：全局变量 "),a("code",[t._v("int arr[1024] = {0};")]),t._v(" 等价于 "),a("code",[t._v("int arr[1024]")]),t._v("。")])])}),[],!1,null,null,null);s.default=e.exports}}]);