(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{285:function(t,s,a){"use strict";a.r(s);var n=a(14),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-1-gnu-c-complier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-gnu-c-complier"}},[t._v("#")]),t._v(" 1.1 GNU C Complier")]),t._v(" "),a("p",[t._v("gcc/g++指令选项\t功 能")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-E")]),t._v("（大写）\t预处理指定的源文件，不进行编译。")]),t._v(" "),a("li",[a("code",[t._v("-S")]),t._v("（大写）\t编译指定的源文件，但是不进行汇编。")]),t._v(" "),a("li",[a("code",[t._v("-c")]),t._v("\t编译、汇编指定的源文件，但是不进行链接。")]),t._v(" "),a("li",[a("code",[t._v("-o")]),t._v("\t指定生成文件的文件名。")]),t._v(" "),a("li",[a("code",[t._v("-llibrary")]),t._v("\t其中 library 表示要搜索的库文件的名称。该选项用于手动指定链接环节中程序可以调用的库文件。建议 -l 和库文件名之间不使用空格，比如 -lstdc++。")])]),t._v(" "),a("p",[t._v("注意，使用-l选项指明静态库的名字时，既不需要lib前缀，也不需要.a后缀，只能写 test，GCC 会自动加上前缀和后缀。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("-L <path>")]),t._v(" 指定库路径。")]),t._v(" "),a("li",[a("code",[t._v("-I <path>")]),t._v(" 指定头文件路径。")]),t._v(" "),a("li",[a("code",[t._v("-ansi")]),t._v("\t对于 C 语言程序来说，其等价于 -std=c90；对于 C++ 程序来说，其等价于 -std=c++98。")]),t._v(" "),a("li",[a("code",[t._v("-std=")]),t._v("\t手动指令编程语言所遵循的标准，例如 c89、c90、c++98、c++11 等。")]),t._v(" "),a("li",[a("code",[t._v("-D")]),t._v(" 处理源文件前定义一个宏。")]),t._v(" "),a("li",[a("code",[t._v("-U")]),t._v(" 取消宏定义。")]),t._v(" "),a("li",[a("code",[t._v("-g")]),t._v(" 生成可调式文件。")]),t._v(" "),a("li",[a("code",[t._v("-O2")]),t._v(" 比 "),a("code",[t._v("-O")]),t._v(" 更好的优化编译。")]),t._v(" "),a("li",[a("code",[t._v("-MM")]),t._v(" 查看文件的依赖（非标准库）")]),t._v(" "),a("li",[a("code",[t._v("Wall")]),t._v(" 打开所有警告。")]),t._v(" "),a("li",[a("code",[t._v("Wextra")]),t._v(" 启用一些未由-Wall启用的额外警告标志。")]),t._v(" "),a("li",[a("code",[t._v("Wvla")]),t._v(" 警告动态数组的使用。")]),t._v(" "),a("li",[a("code",[t._v("Werror")]),t._v(" 把所有的警告当作错误处理。")]),t._v(" "),a("li",[a("code",[t._v("static")]),t._v(" 强制使用同名静态库，并且链接到的所有库都用静态编译。谨慎使用。")]),t._v(" "),a("li",[a("code",[t._v("-pedantic")]),t._v(" 以ANSI/ISO C标准列出的所有警告，使用了扩展语法的地方将会产生警告。")]),t._v(" "),a("li",[a("code",[t._v("-ansi")])]),t._v(" "),a("li",[a("code",[t._v("-std=c99")]),t._v("，c 99 标准。")])]),t._v(" "),a("h2",{attrs:{id:"_1-2-动态链接库和静态链接库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-动态链接库和静态链接库"}},[t._v("#")]),t._v(" 1.2 动态链接库和静态链接库")]),t._v(" "),a("h3",{attrs:{id:"_1-2-1-创建静态链接库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-创建静态链接库"}},[t._v("#")]),t._v(" 1.2.1 创建静态链接库")]),t._v(" "),a("p",[a("code",[t._v("ar rcs + 静态库文件的名字 + 目标文件列表")])]),t._v(" "),a("p",[t._v("如"),a("code",[t._v("ar rcs libtest.a *.o")])]),t._v(" "),a("p",[t._v("ar 是 Linux 的一个备份压缩命令，它可以将多个文件打包成一个备份文件（也叫归档文件），也可以从备份文件中提取成员文件。ar 命令最常见的用法是将目标文件打包为静态链接库。")]),t._v(" "),a("p",[t._v("对参数的说明：")]),t._v(" "),a("ul",[a("li",[t._v("参数 "),a("code",[t._v("r")]),t._v(" 用来替换库中已有的目标文件，或者加入新的目标文件。")]),t._v(" "),a("li",[t._v("参数 "),a("code",[t._v("c")]),t._v(" 表示创建一个库。不管库否存在，都将创建。")]),t._v(" "),a("li",[t._v("参数 "),a("code",[t._v("s")]),t._v(" 用来创建目标文件索引，这在创建较大的库时能提高速度。")]),t._v(" "),a("li",[t._v("参数 "),a("code",[t._v("v")]),t._v(" 用")]),t._v(" "),a("li",[a("code",[t._v("d")]),t._v(" 从归档文件中删除")]),t._v(" "),a("li",[a("code",[t._v("t")]),t._v(" 查看归档文件的内容")]),t._v(" "),a("li",[a("code",[t._v("x")]),t._v(" 解压归档文件")]),t._v(" "),a("li",[a("code",[t._v("a/b")]),t._v(" 向归档文件中添加内容")]),t._v(" "),a("li",[a("code",[t._v("v")]),t._v(" 显示详细信息")])]),t._v(" "),a("p",[a("code",[t._v("ar rcsv libxxx.a *.o")])]),t._v(" "),a("h3",{attrs:{id:"_1-2-2-创建动态链接库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-创建动态链接库"}},[t._v("#")]),t._v(" 1.2.2 创建动态链接库")]),t._v(" "),a("p",[a("code",[t._v("gcc 源文件(*.c) -c -fpic -Wall")])]),t._v(" "),a("p",[a("code",[t._v("gcc -shared 与位置无关的目标文件(*.o) -o 动态库(libxxx.so)")])]),t._v(" "),a("p",[a("code",[t._v("-fPIC")]),t._v(" 是创建与地址无关的编译程序（pic，position independent code），是为了能够在多个应用程序间共享。"),a("code",[t._v("-shared")]),t._v(" 指定生成动态链接库。")]),t._v(" "),a("p",[t._v("态库必须拷贝放在/usr/lib目录或/lib目录中，才可以使用。如果不想拷贝的话，可以在之前系统lib目录下生成一个动态库的软链接。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("# 发布\n \t1. 提供头文件: xxx.h\n \t2. 提供动态库: libxxx.so\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("动态库如果安装在/lib或者/usr/lib下，那么 ld 默认能够找到")]),t._v(" "),a("p",[t._v("或者将文件路径保存到 "),a("code",[t._v("/etc/ld.so.conf")]),t._v(" 中。执行 "),a("code",[t._v("ldconfig")]),t._v(" 命令，将 "),a("code",[t._v("/etc/ld.so.conf")]),t._v(" 中保存的库路径写入 "),a("code",[t._v("/etc/ld.so.cache")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("LD_LIBRARY_PATH")]),t._v(" 环境变量保存库路径。")]),t._v(" "),a("p",[t._v("ld.so 接口。")]),t._v(" "),a("p",[t._v("静态库和动态库的载入时间是不一样的。")]),t._v(" "),a("p",[t._v("静态库的代码在编译的过程中已经载入到可执行文件中，所以最后生成的可执行文件相对较大。")]),t._v(" "),a("p",[t._v("动态库的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，所以最后生成的可执行文件相对较小。")]),t._v(" "),a("p",[t._v("静态库和动态库的最大区别是，静态库链接的时候把库直接加载到程序中,而动态库链接的时候，它只是保留接口，将动态库与程序代码独立，这样就可以提高代码的可复用度和降低程序的耦合度。")]),t._v(" "),a("h2",{attrs:{id:"_1-3-gnu-symbolic-debugger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-gnu-symbolic-debugger"}},[t._v("#")]),t._v(" 1.3 GNU  Symbolic Debugger")]),t._v(" "),a("p",[t._v("TODO: 多线程调试。")]),t._v(" "),a("p",[t._v("GDB调试主要有三种方式：")]),t._v(" "),a("p",[t._v("直接调试目标程序："),a("code",[t._v("gdb ./hello_server")])]),t._v(" "),a("p",[t._v("附加进程id："),a("code",[t._v("gdb attach pid")])]),t._v(" "),a("p",[t._v("如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他，如果GDB attach某个进程，退出GDB之前要用命令 detach 解除附加进程。")]),t._v(" "),a("p",[t._v("调试core文件："),a("code",[t._v("gdb filename corename")])]),t._v(" "),a("p",[t._v("用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。")]),t._v(" "),a("p",[a("code",[t._v("--core=COREFILE")]),t._v(" 调试时core dump的core文件。")]),t._v(" "),a("p",[t._v("gdb 内命令：")]),t._v(" "),a("p",[a("code",[t._v("list")]),t._v(" 列出源文件，回车继续列出。")]),t._v(" "),a("p",[a("code",[t._v("break num")]),t._v(" 在 num 行处设置断点。")]),t._v(" "),a("p",[a("code",[t._v("break funcname")]),t._v(" 在函数入口处设置断点。")]),t._v(" "),a("p",[a("code",[t._v("break filename:funcname")])]),t._v(" "),a("p",[a("code",[t._v("info break")]),t._v(" 查看断点信息。")]),t._v(" "),a("p",[a("code",[t._v("run")]),t._v(" 运行程序。")]),t._v(" "),a("p",[a("code",[t._v("next")]),t._v(" 单条语句执行")]),t._v(" "),a("p",[a("code",[t._v("continue")]),t._v(" 继续运行程序直到下一个断点。")]),t._v(" "),a("p",[a("code",[t._v("print")]),t._v(" 查看变量当前的值。")]),t._v(" "),a("p",[a("code",[t._v("print param=value")]),t._v("，用于在调试过程中修改变量的值；")]),t._v(" "),a("p",[a("code",[t._v("print func()")]),t._v("，输出func函数执行的结果，常见的用途是打印系统函数执行失败原因：print strerror(errno)；")]),t._v(" "),a("p",[a("code",[t._v("ptype val")]),t._v(" 打印变量类型。print type")]),t._v(" "),a("p",[a("code",[t._v("step")]),t._v(" step in，如果有函数调用，他会进入该函数。")]),t._v(" "),a("p",[a("code",[t._v("next")]),t._v(" step out，不会进入函数调用。")]),t._v(" "),a("p",[a("code",[t._v("bt")]),t._v(" backtrace 查看函数堆栈。")]),t._v(" "),a("p",[a("code",[t._v("f n")]),t._v(" frame 切换堆栈。")]),t._v(" "),a("p",[a("code",[t._v("return val")]),t._v(" 命令是立即退出当前函数，剩下的代码不会执行了，return 还可以指定函数的返回值")]),t._v(" "),a("p",[a("code",[t._v("finish")]),t._v(" 运行程序，直到当前函数完成返回。并打印函数返回时的堆栈地址和返回值及参数值等信息。")]),t._v(" "),a("p",[a("code",[t._v("watch expr")]),t._v(" 设置观察点，"),a("code",[t._v("expr")]),t._v(" 值变化时停住程序。"),a("code",[t._v("awatch expr")]),t._v(" 当值被读或被写的时候停住程序。")]),t._v(" "),a("p",[a("code",[t._v("watch *指针变量")]),t._v("，监视的是指针所指的内容；")]),t._v(" "),a("p",[a("code",[t._v("clear")]),t._v(" 清除所有停止点。"),a("code",[t._v("clear num")]),t._v(" 清除指定行的停止点，"),a("code",[t._v("clear filenam:linenum")]),t._v(" 清除指定文件指定行的停止点。")]),t._v(" "),a("p",[a("code",[t._v("disable [breakpoints] [range...]")]),t._v(" 暂停所指定的停止点。")]),t._v(" "),a("p",[a("code",[t._v("enable [breadpoints] [range...]")]),t._v(" 使能所有停止点。")]),t._v(" "),a("p",[a("code",[t._v("quit")]),t._v(" 退出")]),t._v(" "),a("h2",{attrs:{id:"_1-4-包管理工具-apt-和-dpkg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-包管理工具-apt-和-dpkg"}},[t._v("#")]),t._v(" 1.4 包管理工具 apt 和 dpkg")]),t._v(" "),a("h3",{attrs:{id:"_1-4-1-软件源配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-1-软件源配置文件"}},[t._v("#")]),t._v(" 1.4.1 软件源配置文件")]),t._v(" "),a("p",[a("code",[t._v("/etc/apt/sources.list")])]),t._v(" "),a("p",[t._v("软件源是指互联网中的众多服务器，这些服务器上存放了大量的软件包，可用于用户主机的更新和升级。")]),t._v(" "),a("h3",{attrs:{id:"_1-4-2-apt-get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-2-apt-get"}},[t._v("#")]),t._v(" 1.4.2 apt-get")]),t._v(" "),a("p",[a("code",[t._v("apt-get")]),t._v(" 用于管理软件包，包括安装、卸载、升级等。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("update")]),t._v(" 刷新软件源，下载更新软件包列表信息。")]),t._v(" "),a("li",[a("code",[t._v("upgrade")]),t._v(" 将系统中所有软件包升级到最新版本。")]),t._v(" "),a("li",[a("code",[t._v("install")]),t._v(" 下载所需软件包并进行安装配置。")]),t._v(" "),a("li",[a("code",[t._v("remove")]),t._v(" 卸载软件包。")]),t._v(" "),a("li",[a("code",[t._v("autoremove")]),t._v(" 将不满足依赖关系的软件包自动卸载。")]),t._v(" "),a("li",[a("code",[t._v("source")]),t._v(" 下载源码包。")]),t._v(" "),a("li",[a("code",[t._v("clean")]),t._v(" 删除缓存区中所有已下载的包文件。")]),t._v(" "),a("li",[a("code",[t._v("autoclean")]),t._v(" 删除缓存区中老版本的已下载的包文件。")]),t._v(" "),a("li",[a("code",[t._v("check")]),t._v(" 检查系统中依赖关系的完整性。")]),t._v(" "),a("li",[a("code",[t._v("--purge")]),t._v(" 与 "),a("code",[t._v("remove")]),t._v(" 一起使用，完全卸载软件包，同时删除该软件包所使用的配置文件。")]),t._v(" "),a("li",[a("code",[t._v("-s")]),t._v(" 不做实际操作，只是模拟命令执行结果。")]),t._v(" "),a("li",[a("code",[t._v("-f")]),t._v(" 修复系统中存在的软件包依赖性问题。")])]),t._v(" "),a("p",[a("code",[t._v("apt-get check")]),t._v(" "),a("code",[t._v("apt-get -f install")]),t._v(" 通常作为组合命令使用，前者用于检查软件包依赖关系，后者用于修复依赖关系。")]),t._v(" "),a("p",[t._v("经常使用 "),a("code",[t._v("apt-get update")]),t._v(" 刷新软件源可保持软件源最新。该命令会为服务器具有的软件包资源j")]),t._v(" "),a("p",[t._v("查询安装包大小："),a("code",[t._v('apt-cache show <package> | grep "Size"')])]),t._v(" "),a("h3",{attrs:{id:"_1-4-3-dpkg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-3-dpkg"}},[t._v("#")]),t._v(" 1.4.3 dpkg")]),t._v(" "),a("p",[a("code",[t._v("dpkg -r <package>")]),t._v(" 移除一个已安装的软件包。")]),t._v(" "),a("p",[a("code",[t._v("dpkg -i <package>")]),t._v(" 离线安装。")]),t._v(" "),a("p",[a("code",[t._v("dpkg -p <package>")]),t._v(" 移除已安装软件包以及配置文件。")]),t._v(" "),a("p",[a("code",[t._v("dpkg -L <package>")]),t._v(" 列出安装的软件包清单。")]),t._v(" "),a("p",[a("code",[t._v("dpkg-reconfigure <package>")]),t._v(" 重新配置一个已安装的软件包。")]),t._v(" "),a("h2",{attrs:{id:"_1-5-输入输出重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-输入输出重定向"}},[t._v("#")]),t._v(" 1.5 输入输出重定向")]),t._v(" "),a("p",[t._v("标准输入 0，默认是键盘，标准输出 1，默认是终端，标准错误输出 2，默认是终端。")]),t._v(" "),a("p",[a("code",[t._v("command < file")]),t._v(" 将 "),a("code",[t._v("file")]),t._v(" 重定向为输入源。")]),t._v(" "),a("p",[a("code",[t._v("command > file")]),t._v(" 将 "),a("code",[t._v("file")]),t._v(" 重定向为输出源。")]),t._v(" "),a("p",[a("code",[t._v("command >> file")]),t._v(" ，将 "),a("code",[t._v("file")]),t._v(" 重定向为输出源，追加模式。")]),t._v(" "),a("p",[a("code",[t._v("command 2> file")]),t._v(" 将 "),a("code",[t._v("file")]),t._v(" 重定向为标准错误源。")]),t._v(" "),a("p",[a("code",[t._v("command 2>> file")]),t._v(" 将 "),a("code",[t._v("file")]),t._v(" 重定向为标准错误源，追加模式。")]),t._v(" "),a("p",[a("code",[t._v("command &>> file")]),t._v(" 将 "),a("code",[t._v("file")]),t._v(" 重定向为标准输出源和标准错误源，等同于 "),a("code",[t._v(">>&")]),t._v(" ，标准输出与标准错误输出全部重定向。")]),t._v(" "),a("p",[a("code",[t._v("command >> file1 2>> file2")]),t._v(" 将 "),a("code",[t._v("file1")]),t._v(" 重定向为标准标准输出源，将 "),a("code",[t._v("file2")]),t._v(" 重定向为标准错误。")]),t._v(" "),a("p",[a("code",[t._v("command > file1 2>&1")]),t._v(" 将标准错误输出转成标准输出。")]),t._v(" "),a("p",[a("code",[t._v("&> /dev/null")]),t._v(" 重定向到 "),a("code",[t._v("null")]),t._v("。")]),t._v(" "),a("p",[t._v("输入输出重定向就是取代了键盘屏幕,能够接受键盘输入的都可以用重定向改为文件输入,能够输出到屏幕的,都可以通过重定向保存到文件。")]),t._v(" "),a("p",[t._v("而管道符可以把标准输出转标准输入,以让可以接受标准输入的命令可以以此为输入执行命令,所以说,重定向也可以做到同样的事情,但一般来说不会这么做,就像cat,默认以文件名为参数,没有文件名才从标准输入读。")]),t._v(" "),a("p",[t._v("定向的作用对象只能是文件。")]),t._v(" "),a("h2",{attrs:{id:"_1-6-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-常用命令"}},[t._v("#")]),t._v(" 1.6 常用命令")]),t._v(" "),a("p",[t._v("ls,cd,mv,cp,rm,mkdir,echo,date,pwd,clear,who,man,shutdown,passwd,su,top,pstree")]),t._v(" "),a("h3",{attrs:{id:"_1-6-1-cat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-1-cat"}},[t._v("#")]),t._v(" 1.6.1 cat")]),t._v(" "),a("p",[a("code",[t._v("cat")]),t._v(" 等待输入，按"),a("code",[t._v("<enter>")]),t._v(" 键后输出到标准输出。")]),t._v(" "),a("p",[a("code",[t._v("cat < file")]),t._v(" 将file 的内容输出到标准输出。（默认是终端）")]),t._v(" "),a("p",[a("code",[t._v("cat > file")]),t._v(" 将输入的内容重定向到 file 中。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-2-less"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-2-less"}},[t._v("#")]),t._v(" 1.6.2 less")]),t._v(" "),a("p",[t._v("是一个分页显示工具。")]),t._v(" "),a("p",[a("code",[t._v("less")]),t._v(" 命令主要用于打开大文件，"),a("code",[t._v("less")]),t._v(" 不会读取整个文件，相比于 vim 或 nano 等文本编辑器，加载时间会更快。")]),t._v(" "),a("p",[a("code",[t._v("C-f")]),t._v(" 翻页，"),a("code",[t._v("C-b")]),t._v(" 翻页。")]),t._v(" "),a("p",[a("code",[t._v("-N")]),t._v(" 打印行号。")]),t._v(" "),a("p",[a("code",[t._v("-m")]),t._v(" 显示百分比。")]),t._v(" "),a("p",[a("code",[t._v("/<pattern>")]),t._v(" 搜索 "),a("code",[t._v("<pattern>")]),t._v("，操作使用 "),a("code",[t._v("vi")]),t._v(" 模式。"),a("code",[t._v("n")]),t._v("、"),a("code",[t._v("N")]),t._v("、"),a("code",[t._v("?")]),t._v(" 。")]),t._v(" "),a("p",[a("code",[t._v("pa -aux | less")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-3-wahtis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-3-wahtis"}},[t._v("#")]),t._v(" 1.6.3 wahtis")]),t._v(" "),a("p",[t._v("等同于 "),a("code",[t._v("man -f")]),t._v(" 。显示来自手册页的加简短说明(若有)。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-4-mount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-4-mount"}},[t._v("#")]),t._v(" 1.6.4 mount")]),t._v(" "),a("p",[t._v("临时挂载分区")]),t._v(" "),a("h3",{attrs:{id:"_1-6-5-umount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-5-umount"}},[t._v("#")]),t._v(" 1.6.5 umount")]),t._v(" "),a("p",[t._v("卸载一个文件系统，就是从系统目录结构中，移去该指定的文件系统，卸载后的文件系统不能被用户使用。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-6-find"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-6-find"}},[t._v("#")]),t._v(" 1.6.6 find")]),t._v(" "),a("h3",{attrs:{id:"_1-6-7-du"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-7-du"}},[t._v("#")]),t._v(" 1.6.7 du")]),t._v(" "),a("p",[t._v("报告磁盘空间使用情况。")]),t._v(" "),a("p",[a("code",[t._v("-h")]),t._v(" 以最常见的格式显示出大小。")]),t._v(" "),a("p",[a("code",[t._v("-T")]),t._v(" 显示文件类型。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-8-df"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-8-df"}},[t._v("#")]),t._v(" 1.6.8 df")]),t._v(" "),a("p",[t._v("报告文件系统磁盘空间的使用情况。")]),t._v(" "),a("p",[a("code",[t._v("-T")]),t._v(" 输出文件类型。")]),t._v(" "),a("p",[a("code",[t._v("-h")]),t._v(" 以最常见的格式显示出大小。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-9-grep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-9-grep"}},[t._v("#")]),t._v(" 1.6.9 grep")]),t._v(" "),a("p",[a("code",[t._v("-n")]),t._v(" 显示行号。")]),t._v(" "),a("p",[a("code",[t._v("-v")]),t._v(" 改变匹配的意义，不显示匹配的行。通常配合使用：")]),t._v(" "),a("p",[a("code",[t._v('pa -aux | grep -n xxx | grep -v "grep"')])]),t._v(" "),a("h3",{attrs:{id:"_1-6-10-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-10-file"}},[t._v("#")]),t._v(" 1.6.10 file")]),t._v(" "),a("p",[t._v("查看文件类型。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-11-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-11-time"}},[t._v("#")]),t._v(" 1.6.11 time")]),t._v(" "),a("p",[t._v("多次执行一个脚本。")]),t._v(" "),a("p",[a("code",[t._v("time <可执行文件> [次数]")])]),t._v(" "),a("p",[t._v("输出每次重复操作(iteration)所需时间的平均值，以微秒为单位。测量时间使用流(elapsed)时间，而不是 CPU 时间。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-12-ls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-12-ls"}},[t._v("#")]),t._v(" 1.6.12 ls")]),t._v(" "),a("p",[t._v("列出目录内容。")]),t._v(" "),a("p",[a("code",[t._v("-F")]),t._v(" 目录显示 "),a("code",[t._v("/")]),t._v(" 后缀。")]),t._v(" "),a("p",[a("code",[t._v("-l")]),t._v(" 显示文件详细信息")]),t._v(" "),a("p",[a("code",[t._v("-a")]),t._v(" 显示所有隐藏文件")]),t._v(" "),a("p",[a("code",[t._v("R")]),t._v(" 递归显示子目录所有内容。")]),t._v(" "),a("p",[a("code",[t._v("i")]),t._v(" 显示 "),a("code",[t._v("inode")]),t._v("。")]),t._v(" "),a("p",[a("code",[t._v("-h")]),t._v(" 以最常见的格式显示出大小。")]),t._v(" "),a("p",[a("code",[t._v("-d")]),t._v(" 查看目录自己的内容，而不是目录下的内容。")]),t._v(" "),a("p",[a("code",[t._v("ls -alrF")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-13-tar"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-13-tar"}},[t._v("#")]),t._v(" 1.6.13 tar")]),t._v(" "),a("p",[t._v("7z 和 zip 压缩格式都不能保留 unix 风格的文件权限，比如解压出个可执行文件要重新 chmod chown 才能恢复正常。而 tar 格式可以。而 tar 本身不提供压缩，无非就是把包括所有文件的內容和权限拼成一个文件而己，所以用另外如 gzip 格式压缩。")]),t._v(" "),a("p",[t._v("存储或提取 tar 文件的程序。")]),t._v(" "),a("p",[a("code",[t._v("-f")]),t._v(" 指定存档或设备中的文件。")]),t._v(" "),a("p",[a("code",[t._v("-z")]),t._v(" 用 "),a("code",[t._v("gzip")]),t._v(" 处理文档。")]),t._v(" "),a("p",[a("code",[t._v("-x")]),t._v(" 从文档提取文件。")]),t._v(" "),a("p",[a("code",[t._v("-c")]),t._v(" 创建一个新的文档。")]),t._v(" "),a("p",[a("code",[t._v("-v")]),t._v(" 显示文件处理过程。")]),t._v(" "),a("p",[a("code",[t._v("tar -xzvf")]),t._v(" 解压 "),a("code",[t._v("tar.gz")]),t._v(" 文件。")]),t._v(" "),a("p",[a("code",[t._v("tar -czvf")]),t._v(" 压缩为 "),a("code",[t._v("tar.gz")]),t._v(" 文件。")]),t._v(" "),a("p",[t._v("xz 压缩效果最好，多线程压缩最快。")]),t._v(" "),a("p",[a("code",[t._v("tar -cvf <压缩目标> | xz -T 0 -c > <压缩包名>.tar.xz")]),t._v(" 或 "),a("code",[t._v('tar -I "xz -T0" -cvf <压缩包名>.tar.xz <压缩目标>')])]),t._v(" "),a("h3",{attrs:{id:"_1-6-14-chmod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-14-chmod"}},[t._v("#")]),t._v(" 1.6.14 chmod")]),t._v(" "),a("p",[t._v("改变文件或目录的访问权限。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-15-chgrp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-15-chgrp"}},[t._v("#")]),t._v(" 1.6.15 chgrp")]),t._v(" "),a("p",[t._v("改变文件或目录所属的组。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-16-ln"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-16-ln"}},[t._v("#")]),t._v(" 1.6.16 ln")]),t._v(" "),a("p",[t._v("在文件之间建立连接。")]),t._v(" "),a("p",[t._v("默认建立硬链接。")]),t._v(" "),a("p",[a("code",[t._v("-s")]),t._v(" 建立软链接。")]),t._v(" "),a("p",[t._v("Linux 下的文件是通过索引节点（Inode）来识别文件，在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号 (Inode Number)。")]),t._v(" "),a("p",[t._v("在 Linux 中，多个文件名指向同一索引节点是存在的，所以硬连接指通过索引节点来进行的连接，即每一个硬链接都是一个指向对应区域的文件。")]),t._v(" "),a("p",[t._v("文件系统会维护一个引用计数，只要有文件指向这个区块，它就不会从硬盘上消失。")]),t._v(" "),a("p",[t._v("不能对目录创建硬链接。")]),t._v(" "),a("p",[a("strong",[t._v("硬链接的作用是允许一个文件拥有多个有效路径名")]),t._v("，这样用户就可以建立硬链接到重要文件,有防止“误删”的功能。")]),t._v(" "),a("p",[t._v("只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个链接被删除后，文件的数据块及目录的连接才会被释放，也就是说，文件才会被真正删除。")]),t._v(" "),a("p",[a("strong",[t._v("软链接和源文件是两个不同的文件")]),t._v("，支持跨文件系统建立。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-17-whereis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-17-whereis"}},[t._v("#")]),t._v(" 1.6.17 whereis")]),t._v(" "),a("p",[t._v("查命令、源文件和man文件。")]),t._v(" "),a("p",[t._v("locate the binary, source, and manual page files for a command。")]),t._v(" "),a("p",[a("code",[t._v("-b")]),t._v(" 只搜索二进制。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-18-mkdir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-18-mkdir"}},[t._v("#")]),t._v(" 1.6.18 mkdir")]),t._v(" "),a("p",[a("code",[t._v("-p")]),t._v(" 嵌套创建子目录。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-19-ps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-19-ps"}},[t._v("#")]),t._v(" 1.6.19 ps")]),t._v(" "),a("p",[t._v("列出当前进程。")]),t._v(" "),a("p",[a("code",[t._v("-l")]),t._v(" 查看当前终端的进程")]),t._v(" "),a("p",[a("code",[t._v("-ef")]),t._v(" 以标准语法查看进程。")]),t._v(" "),a("p",[a("code",[t._v("-aux")]),t._v(" 使用 BSD 语法查看进程。")]),t._v(" "),a("p",[a("code",[t._v("-le")])]),t._v(" "),a("p",[a("code",[t._v("-axj")]),t._v(" 查看所有守护进程")]),t._v(" "),a("p",[t._v("其中：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("USER")]),t._v(" 进程的启动者")]),t._v(" "),a("li",[a("code",[t._v("PID")]),t._v(" 进程 ID")]),t._v(" "),a("li",[a("code",[t._v("%CPU")]),t._v(" CPU 占用百分比")]),t._v(" "),a("li",[a("code",[t._v("%MEM")]),t._v(" 内存占用百分比")]),t._v(" "),a("li",[a("code",[t._v("VSZ")]),t._v(" 占用虚拟内存（swap空间）的大小")]),t._v(" "),a("li",[a("code",[t._v("RSS")]),t._v(" 占用常驻内存（物理内存）的大小")]),t._v(" "),a("li",[a("code",[t._v("TTY")]),t._v(" teel to you，终端，? 表示不需要终端或未知终端")]),t._v(" "),a("li",[a("code",[t._v("STAT")]),t._v(" 进程状态：\n"),a("ul",[a("li",[a("code",[t._v("D")]),t._v(" 无法中断的休眠状态")]),t._v(" "),a("li",[a("code",[t._v("S")]),t._v(" 休眠 sleep")]),t._v(" "),a("li",[a("code",[t._v("R")]),t._v(" 运行")]),t._v(" "),a("li",[a("code",[t._v("Z")]),t._v(" zombie ，僵死")]),t._v(" "),a("li",[a("code",[t._v("<")]),t._v(" 高优先级")]),t._v(" "),a("li",[a("code",[t._v("N")]),t._v(" 低优先级")]),t._v(" "),a("li",[a("code",[t._v("s")]),t._v(" 父进程")]),t._v(" "),a("li",[a("code",[t._v("+")]),t._v(" 前台进程")]),t._v(" "),a("li",[a("code",[t._v("X")]),t._v(" 死掉的进程")]),t._v(" "),a("li",[a("code",[t._v("L")]),t._v(" 有些页被缩进内存")]),t._v(" "),a("li",[a("code",[t._v("l")]),t._v(" 多线程，克隆线程。")]),t._v(" "),a("li",[a("code",[t._v("T")]),t._v(" 停止或被追踪。")])])]),t._v(" "),a("li",[a("code",[t._v("START")]),t._v(" 启动改进程的时间")]),t._v(" "),a("li",[a("code",[t._v("TIME")]),t._v(" 该进程占用 CPU 时间")]),t._v(" "),a("li",[a("code",[t._v("COMMAND")]),t._v(" 启动该进程的命令的名称")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-20-kill"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-20-kill"}},[t._v("#")]),t._v(" 1.6.20 kill")]),t._v(" "),a("p",[a("code",[t._v("kill [-signal] PID")])]),t._v(" "),a("p",[t._v("给指定进程发送指定信号. 如果没有指定信号, 则发送 TERM信号.  TERM 信号会杀死不能俘获该信号的进程.  对于其他进程,可能需要使用 KILL (9) 信号, 因为该信号不能够被俘获.")]),t._v(" "),a("p",[a("code",[t._v("SIGHUP")]),t._v(" 1 终端在结束时，会给其下所有进程发送某个信号。对于与终端脱离关系的守护进程，这个信号用于通知它重新读取配置文件。")]),t._v(" "),a("p",[a("code",[t._v("SIGINT")]),t._v(" 2 结束进程 "),a("code",[t._v("C-C")])]),t._v(" "),a("p",[a("code",[t._v("SIGQUIT")]),t._v(" 3 结束进程 "),a("code",[t._v("C-\\")])]),t._v(" "),a("p",[a("code",[t._v("SIGUSR1")]),t._v(" 10 自定义")]),t._v(" "),a("p",[a("code",[t._v("SIGUSR2")]),t._v(" 12 自定义")]),t._v(" "),a("p",[a("code",[t._v("SIGKILL")]),t._v(" 9 杀死进程信号，不能不捕捉，不能被忽略、阻塞、注册。")]),t._v(" "),a("p",[a("code",[t._v("SIGALRM")]),t._v(" 14 闹钟信号，定时器，当倒计时进程结束，结束进程")]),t._v(" "),a("p",[a("code",[t._v("SIGTERM")]),t._v(" 15 终止信号。")]),t._v(" "),a("p",[a("code",[t._v("SIGHLD")]),t._v(" 17 子进程结束，给父进程发送的信号")]),t._v(" "),a("p",[a("code",[t._v("SIGSTOP")]),t._v(" 19 暂停进程，不能被捕捉信号，不能被忽略，不能被阻塞。")]),t._v(" "),a("p",[a("code",[t._v("SIGTSTP")]),t._v(" 20 暂停进程，"),a("code",[t._v("C-Z")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-21-chown"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-21-chown"}},[t._v("#")]),t._v(" 1.6.21 chown")]),t._v(" "),a("p",[t._v("修改文件所有者和组别。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-22-sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-22-sync"}},[t._v("#")]),t._v(" 1.6.22 sync")]),t._v(" "),a("p",[t._v("将内存的数据写回硬盘，并释放缓存。\nLinux系统运行过程中，会有大量的临时数据驻留在内存缓存区，在关闭系统时需要将内存数据与硬盘数据进行同步校验，以保证系统数据不丢失。因此，通常sync命令是在关闭Linux系统前时使用。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-23-adduser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-23-adduser"}},[t._v("#")]),t._v(" 1.6.23 adduser")]),t._v(" "),a("p",[t._v("添加用户。")]),t._v(" "),a("p",[t._v("deluser 删除用户的同时删除用户的工作目录。")]),t._v(" "),a("p",[t._v("delgroup 删除用户组。")]),t._v(" "),a("p",[a("code",[t._v("/etc/shadow")]),t._v("文件是加密的用户清单。")]),t._v(" "),a("p",[a("code",[t._v("/etc/passwd")]),t._v("文件是系统能够识别的用户清单。")]),t._v(" "),a("p",[a("code",[t._v("/etc/group")]),t._v(" 文件包含了UNIX组的名称和每个组中成员列表。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-24-locate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-24-locate"}},[t._v("#")]),t._v(" 1.6.24 locate")]),t._v(" "),a("p",[t._v("超快速查找任意文件。")]),t._v(" "),a("p",[t._v("查找速度最快，但需要更新数据库。")]),t._v(" "),a("p",[a("code",[t._v("$ sudo updatedb")])]),t._v(" "),a("p",[a("code",[t._v("-r")]),t._v(" 使用正则表达式，如 "),a("code",[t._v("locate -r '\\bls$'")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-25-find"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-25-find"}},[t._v("#")]),t._v(" 1.6.25 find")]),t._v(" "),a("p",[t._v("功能最强大，但速度慢。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-26-grep"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-26-grep"}},[t._v("#")]),t._v(" 1.6.26 grep")]),t._v(" "),a("p",[t._v("打印匹配给定模式的行。")]),t._v(" "),a("p",[a("code",[t._v("grep [options] PATTERN [FILE]")])]),t._v(" "),a("p",[t._v("如 "),a("code",[t._v("grep enum /usr/include/*")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-27-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-27-size"}},[t._v("#")]),t._v(" 1.6.27 size")]),t._v(" "),a("p",[t._v("指定输入文件各段及其总和的大小。（可执行文件、静态库、动态库、目标文件）")]),t._v(" "),a("h3",{attrs:{id:"_1-6-28-strace"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-28-strace"}},[t._v("#")]),t._v(" 1.6.28 strace")]),t._v(" "),a("p",[t._v("跟踪可执行程序的系统调用。")]),t._v(" "),a("p",[t._v("strace常用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通 过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。")]),t._v(" "),a("p",[t._v("每一行都是一条系统调用，等号左边是系统调用的函数名及其参数，右边是该调用的返回值。")]),t._v(" "),a("p",[t._v("strace 显示这些调用的参数并返回符号形式的值。strace 从内核接收信息，而且不需要以任何特殊的方式来构建内核。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-29-nm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-29-nm"}},[t._v("#")]),t._v(" 1.6.29 nm")]),t._v(" "),a("p",[t._v("nm 是name 的缩写，它显示指定文件中的符号信息，文件可以是对象文件、可执行文件或对象文件库。如果文件中没有包含符号信息，nm报告该情况，单不把他解释为出错。nm缺省情况下报告十进制符号表示法下的数字值。")]),t._v(" "),a("p",[a("code",[t._v("nm -C xxx.o")])]),t._v(" "),a("h3",{attrs:{id:"_1-6-30-umask"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-30-umask"}},[t._v("#")]),t._v(" 1.6.30 umask")]),t._v(" "),a("p",[t._v("Linux 不同，它是通过使用 umask 默认权限来给所有新建的文件和目录赋予初始权限的。")]),t._v(" "),a("p",[t._v("root用户默认是0022，普通用户默认是 0002")]),t._v(" "),a("p",[t._v("文件（或目录）的初始权限 = 文件（或目录）的最大默认权限 - umask权限")]),t._v(" "),a("p",[t._v("umask -S 查看默认权限")]),t._v(" "),a("p",[t._v("默认权限：文件 0777 - 0002 = 0755\n目录 0666 - 0002 = 0644")]),t._v(" "),a("h3",{attrs:{id:"_1-6-31-ldd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-31-ldd"}},[t._v("#")]),t._v(" 1.6.31 ldd")]),t._v(" "),a("p",[t._v("命令可以查看一个可执行程序依赖的共享库。")]),t._v(" "),a("h3",{attrs:{id:"_1-6-32-fg-bg-jobs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-32-fg-bg-jobs"}},[t._v("#")]),t._v(" 1.6.32 fg,bg,jobs")]),t._v(" "),a("p",[a("code",[t._v("jobs -l")]),t._v(" 命令可以用来查看当前终端放入后台的工作")]),t._v(" "),a("p",[a("code",[t._v("fg %num")]),t._v(" 命令用于把后台工作恢复到前台执行")]),t._v(" "),a("p",[a("code",[t._v("bg %num")]),t._v(" 把后台暂停的工作恢复到后台执行")]),t._v(" "),a("h3",{attrs:{id:"_1-6-33-nohub"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-33-nohub"}},[t._v("#")]),t._v(" 1.6.33 nohub,&")]),t._v(" "),a("p",[t._v("nohup 不挂断地运行命令。no hangup的缩写，意即“不挂断”。命令的作用就是让后台工作在离开操作终端时，也能够正确地在后台执行。")]),t._v(" "),a("p",[t._v("nohup 命令运行由 Command参数和任何相关的 Arg参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。 如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。")]),t._v(" "),a("p",[a("code",[t._v("nohup COMMAND &")]),t._v(" 这样就能使命令永久的在后台执行。")]),t._v(" "),a("h2",{attrs:{id:"_1-7-elf-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-elf-文件"}},[t._v("#")]),t._v(" 1.7 ELF 文件")]),t._v(" "),a("p",[t._v("ELF文件是一种用于二进制文件、可执行文件、目标代码、共享库和core转存格式文件。是UNIX系统实验室（USL）作为应用程序二进制接口（Application Binary Interface，ABI）而开发和发布的，也是Linux的主要可执行文件格式。")]),t._v(" "),a("p",[t._v("elf 文件头，内部分段")]),t._v(" "),a("p",[t._v("有三类文件属于 ELF 格式，")]),t._v(" "),a("ol",[a("li",[t._v("可执行文件")]),t._v(" "),a("li",[t._v("目标文件。")])]),t._v(" "),a("p",[a("code",[t._v("readelf -a")]),t._v(" 查看 "),a("code",[t._v("elf")]),t._v(" 文件。")]),t._v(" "),a("p",[t._v("1）可重定位文件（Relocatable File）")]),t._v(" "),a("p",[t._v("包含适合于与其他目标文件链接来创建可执行文件或者共享目标文件的代码和数据，即 xxx.o 文件。")]),t._v(" "),a("p",[t._v("2）可执行文件（Executable File）")]),t._v(" "),a("p",[t._v("包含适合于执行的一个程序，此文件规定了 exec() 如何创建一个程序的进程映像，即 a.out文件。")]),t._v(" "),a("p",[t._v("3）共享目标文件（Shared Object File）")]),t._v(" "),a("p",[t._v("包含可在两种上下文中链接的代码和数据。首先链接编辑器可以将它和其它可重定位文件和共享目标文件一起处理，生成另外一个目标文件。其次，动态链接器（Dynamic Linker）可能将它与某个可执行文件以及其它共享目标一起组合，创建进程映像，即 xxx.so文件。")]),t._v(" "),a("p",[t._v("4）内核转储(core dumps)")]),t._v(" "),a("p",[t._v("存放当前进程的执行上下文，用于dump信号触发。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/linux/ELF%E6%A0%BC%E5%BC%8F.jpg",alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:"/linux/ELF%E8%A7%86%E5%9B%BE.jpg",alt:""}})]),t._v(" "),a("p",[t._v("ELF文件由4部分组成，分别是ELF头（ELF header）、程序头表（Program header table）、节（Section）和节头表（Section header table）。")]),t._v(" "),a("p",[a("code",[t._v("objdump -D")]),t._v(" 查看反汇编信息。")]),t._v(" "),a("p",[a("code",[t._v("objdump -S")]),t._v(" 查看目标的汇编代码。")]),t._v(" "),a("h2",{attrs:{id:"_1-8-常见服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-常见服务"}},[t._v("#")]),t._v(" 1.8 常见服务")]),t._v(" "),a("p",[a("code",[t._v("/etc/init.d/ssh restart")]),t._v(" 重启 "),a("code",[t._v("ssh")]),t._v(" 服务。")]),t._v(" "),a("p",[a("code",[t._v("service sshd restart")])]),t._v(" "),a("p",[a("code",[t._v("systemctl status tftpd-hpa")]),t._v(" 查看服务状态。")]),t._v(" "),a("p",[a("code",[t._v("service tftpd-hpa status")])]),t._v(" "),a("p",[a("code",[t._v("sshd")]),t._v(" 服务，远程访问虚拟机服务。")]),t._v(" "),a("p",[a("code",[t._v("Samba")]),t._v(" 服务，linux 和 windows 共享目录")]),t._v(" "),a("p",[a("code",[t._v("tftp")]),t._v(" 服务，提供内核镜像 zImage 供 uboot 下载。")]),t._v(" "),a("p",[a("code",[t._v("nfs")]),t._v(" 服务，提供网络文件系统。")]),t._v(" "),a("h2",{attrs:{id:"_1-9-进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-进程"}},[t._v("#")]),t._v(" 1.9 进程")]),t._v(" "),a("h3",{attrs:{id:"_1-9-1-进程的组成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-1-进程的组成"}},[t._v("#")]),t._v(" 1.9.1 进程的组成")]),t._v(" "),a("p",[t._v("每个进程都有自己的 PCB，所有进程都有唯一的 PCB。操作系统依据PCB管理进程，操作系统利用PCB实现进程的动态和并发，PCB是进程存在的唯一标志。")]),t._v(" "),a("p",[t._v("所有进程都是既运行于用户方式下，又运行于系统方式下。进程每次调用一个系统调用时，都要从用户方式切换到系统方式，并继续执行。")]),t._v(" "),a("p",[t._v("进程的状态：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("标志")]),t._v(" "),a("th",[t._v("状态")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("D")])]),t._v(" "),a("td",[t._v("不可中断的静止")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("R")])]),t._v(" "),a("td",[t._v("正在执行中")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("S")])]),t._v(" "),a("td",[t._v("阻塞状态")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("T")])]),t._v(" "),a("td",[t._v("暂停执行")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("Z")])]),t._v(" "),a("td",[t._v("不存在但是暂时无法消除")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("W")])]),t._v(" "),a("td",[t._v("没有足够的内存分页可以分配")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("<")])]),t._v(" "),a("td",[t._v("高优先级的进程")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("N")])]),t._v(" "),a("td",[t._v("低优先级的进程")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("L")])]),t._v(" "),a("td",[t._v("有内存分页分配并所在内存中")])])])]),t._v(" "),a("p",[a("code",[t._v("c-z")]),t._v(" 暂停进程。")]),t._v(" "),a("p",[a("code",[t._v("c-c")]),t._v(" 停止进程，可以被捕获。")]),t._v(" "),a("p",[a("code",[t._v("jobs -l")]),t._v(" 查看后台进程。")]),t._v(" "),a("p",[a("code",[t._v("fg %num")]),t._v(" 把后台进程调到前台。")]),t._v(" "),a("p",[a("code",[t._v("&")]),t._v(" 让进程在后台执行。")]),t._v(" "),a("h3",{attrs:{id:"_1-9-2-linux-系统中的进程类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-2-linux-系统中的进程类型"}},[t._v("#")]),t._v(" 1.9.2 Linux 系统中的进程类型")]),t._v(" "),a("p",[t._v("（1）交互教程")]),t._v(" "),a("p",[t._v("（2）批处理进程")]),t._v(" "),a("p",[t._v("（3）守护进程")]),t._v(" "),a("h3",{attrs:{id:"_1-9-3-进程的互斥"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-3-进程的互斥"}},[t._v("#")]),t._v(" 1.9.3 进程的互斥")]),t._v(" "),a("p",[t._v("（1）临界资源")]),t._v(" "),a("p",[t._v("操作系统中将以此只允许一个进程访问的资源。")]),t._v(" "),a("p",[t._v("（2）进程互斥")]),t._v(" "),a("p",[t._v("若干进程要使用某一个共享资源时，任何时候最多允许一个进程使用。任何时候最多允许一个进程使用，其他要使用该资源的进程必须等待，直到只用自愿者释放了该资源。")]),t._v(" "),a("p",[t._v("（3）进程同步")]),t._v(" "),a("p",[t._v("一组并发进程按一定的顺序执行的过程称为进程间的同步。具有同步关系的一组并发进程称为合作进程，合作进程间互相发送的信号称为消息或事件。")]),t._v(" "),a("p",[t._v("（4）临界区")]),t._v(" "),a("p",[t._v("进程中访问连接资源的那段代码称为临界区。为实现对临界资源的互斥访问，应保证诸进程互斥地进入各自的临界区。")]),t._v(" "),a("h3",{attrs:{id:"_1-9-4-进程的调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-4-进程的调度"}},[t._v("#")]),t._v(" 1.9.4 进程的调度")]),t._v(" "),a("p",[t._v("（1）抢占式调度")]),t._v(" "),a("p",[t._v("（2）非抢占式调度")]),t._v(" "),a("p",[t._v("（3）先来先服务调度算法")]),t._v(" "),a("p",[t._v("（4）短进程优先调度算法")]),t._v(" "),a("p",[t._v("（5）高优先级优先调度算法")]),t._v(" "),a("p",[t._v("（6）时间片轮转法")]),t._v(" "),a("h3",{attrs:{id:"_1-9-5-死锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-5-死锁"}},[t._v("#")]),t._v(" 1.9.5 死锁")]),t._v(" "),a("p",[t._v("多个进程因竞争资源而形成一种僵局，若无外力作用，这些进程将永远不能向前推进。")]),t._v(" "),a("ul",[a("li",[t._v("互斥条件，临界资源是独占资源，进程应互斥且排他的使用这些资源。")]),t._v(" "),a("li",[t._v("占有和等待条件，进程在请求资源得不到满足而等待时，不释放已占有资源。")]),t._v(" "),a("li",[t._v("不剥夺条件，又称不可抢占，已获资源只能由进程自愿释放，不允许被其他进程剥夺。")]),t._v(" "),a("li",[t._v("循环等待条件，又称环路条件，存在循环等待链，其中，每个进程都在等待链中等待下一个进程所持有的资源，造成这组进程处于永远等待状态。")])]),t._v(" "),a("p",[t._v("各种死锁防止方法能够防止发生死锁，但必然会降低系统并发性，导致低效的资源利用率。")]),t._v(" "),a("p",[t._v("避免死锁：银行家算法")]),t._v(" "),a("p",[t._v("死锁检测和解除")]),t._v(" "),a("h3",{attrs:{id:"_1-9-6-进程的模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-6-进程的模式"}},[t._v("#")]),t._v(" 1.9.6 进程的模式")]),t._v(" "),a("p",[t._v("进程的执行模式分为用户模式和内核模式。")]),t._v(" "),a("p",[t._v("用户模式通过系统调用进入系统调用。")]),t._v(" "),a("h3",{attrs:{id:"_1-9-7-进程的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-7-进程的创建"}},[t._v("#")]),t._v(" 1.9.7 进程的创建")]),t._v(" "),a("p",[t._v("函数原型："),a("code",[t._v("pid_t fork(void);")])]),t._v(" "),a("p",[t._v("fork确实创建可一个子进程并完全复制父进程，但是子进程是从fork后面的那个指令开始执行。")]),t._v(" "),a("p",[t._v("子进程是父进程的副本，它将获得父进程数据空间、堆、栈等资源的副本。")]),t._v(" "),a("p",[t._v("父子进程间共享的存储空间只有代码段。")]),t._v(" "),a("p",[t._v("fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：")]),t._v(" "),a("ul",[a("li",[t._v("在父进程中，fork返回新创建子进程的进程ID；")]),t._v(" "),a("li",[t._v("在子进程中，fork返回 0。\n如果出现错误，fork返回一个负值。")])]),t._v(" "),a("p",[t._v("fork 的执行过程：")]),t._v(" "),a("ul",[a("li",[t._v("申请PID")]),t._v(" "),a("li",[t._v("申请PCB结构")]),t._v(" "),a("li",[t._v("复制父进程的PCB")]),t._v(" "),a("li",[t._v("将子进程的运行状态设置为不可执行的")]),t._v(" "),a("li",[t._v("将子进程中的某些属性清零，某些保留，某些修改")]),t._v(" "),a("li",[t._v("复制父进程的页（用到了写时拷贝技术）")])]),t._v(" "),a("p",[t._v("写时拷贝技术： 父子进程在初始阶段共享所有的数据（全局、 栈区、 堆区、 代码）， 内核会将所有的区域设置为只读。 当父子进程中任意一个进程试图修改其中的数据时， 内核才会将要修改的数据所在的区域（页） 拷贝一份。")]),t._v(" "),a("h2",{attrs:{id:"_1-10-linux-下的进程管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-linux-下的进程管理"}},[t._v("#")]),t._v(" 1.10 Linux 下的进程管理")]),t._v(" "),a("p",[t._v("（1）启动进程")]),t._v(" "),a("ul",[a("li",[t._v("手工启动（"),a("code",[t._v("bg")]),t._v("后台运行，"),a("code",[t._v("fg")]),t._v("前台运行）")]),t._v(" "),a("li",[t._v("调度启动（"),a("code",[t._v("at")]),t._v("在指定时刻执行相关进程，"),a("code",[t._v("corn")]),t._v("周期性执行相关进程）")])]),t._v(" "),a("p",[t._v("TODO: 进程组、会话")]),t._v(" "),a("h2",{attrs:{id:"_1-11-内核空间和用户空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-内核空间和用户空间"}},[t._v("#")]),t._v(" 1.11 内核空间和用户空间")]),t._v(" "),a("p",[t._v("以32 位 Linux 操作系统为例，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。")]),t._v(" "),a("p",[t._v("用户态的程序不能随意操作内核地址空间，这样对操作系统具有一定的安全保护作用。")]),t._v(" "),a("p",[t._v("当进程/线程运行在内核空间时就处于内核态，而进程/线程运行在用户空间时则处于用户态。")]),t._v(" "),a("p",[t._v("当一个任务（进程）执行系统调用而陷入内核代码中执行时，称进程处于内核运行态（内核态），除了系统调用可以实现用户态到内核态的切换，还有软中断和硬中断。软中断是指进程发生了异常事件；硬中断就有很多种，例如时钟周期、IO等。")]),t._v(" "),a("p",[t._v("在内核态下，进程运行在内核地址空间中，此时 CPU 可以执行任何指令。运行的代码也不受任何的限制，可以自由地访问任何有效地址，也可以直接进行端口的访问。")]),t._v(" "),a("p",[t._v("在用户态下，进程运行在用户地址空间中，被执行的代码要受到 CPU 的很多检查，比如：进程只能访问映射其地址空间的页表项中规定的在用户态下可访问页面的虚拟地址。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/linux/linux%E7%B3%BB%E7%BB%9F%E7%BB%93%E6%9E%84.png",alt:""}})]),t._v(" "),a("h2",{attrs:{id:"_1-12-命令置换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-命令置换"}},[t._v("#")]),t._v(" 1.12 命令置换")]),t._v(" "),a("p",[t._v("将一个命令的输出作为另一个命令的参数。")]),t._v(" "),a("p",[t._v("格式如下：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("command1 `command2`\n\n如:\n$ ls `pwd`\n\n将 pwd 命令的结果作为 ls 命令的参数。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"_1-13-exec-函数族"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-exec-函数族"}},[t._v("#")]),t._v(" 1.13 exec 函数族")]),t._v(" "),a("p",[t._v("exec函数族提供了一种在进程中启动另一个程序执行的方法。它可以根据指定的文件名或目录名找到可执行文件，")]),t._v(" "),a("p",[t._v("并用它来取代原调用进程的数据段、代码段和堆栈段。在执行完之后，原调用进程的内容除了进程号外，其他全部都被替换了。")]),t._v(" "),a("p",[t._v("可执行文件既可以是二进制文件，也可以是任何Linux下可执行的脚本文件。")]),t._v(" "),a("p",[t._v("当进程调用exec函数时，该进程被完全替换为新程序。因为调用exec函数并不创建新进程，所以前后进程的ID并没有改变。")]),t._v(" "),a("p",[t._v("exec 函数族提供了六种在进程中启动另一个程序的方法。exec 函数族的作用是根据指定的文件名或目录名找到可执行文件，并用它来取代调用进程的内容。")]),t._v(" "),a("h3",{attrs:{id:"_1-13-1-使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-1-使用场景"}},[t._v("#")]),t._v(" 1.13.1 使用场景")]),t._v(" "),a("p",[t._v("当进程认为自己不能再为系统和用户做出任何贡献了时就可以调用exec函数，让自己执行新的程序")]),t._v(" "),a("p",[t._v("如果某个进程想同时执行另一个程序，它就可以调用fork函数创建子进程，然后在子进程中调用任何一个exec函数。这样看起来就好像通过执行应用程序而产生了一个新进程一样")]),t._v(" "),a("h3",{attrs:{id:"_1-13-2-语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-2-语法"}},[t._v("#")]),t._v(" 1.13.2 语法")]),t._v(" "),a("p",[a("strong",[t._v("函数原型")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("environ"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execlp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" envp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execvp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" envp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[a("code",[t._v("execve")]),t._v(" 是系统调用。")]),t._v(" "),a("p",[t._v("l(list)：参数地址列表，以空指针结尾。")]),t._v(" "),a("p",[t._v("v(vector)：存有各参数地址的指针数组的地址。")]),t._v(" "),a("p",[t._v("p(path)：按 PATH 环境变量指定的目录搜索可执行文件。")]),t._v(" "),a("p",[t._v("e(environment)：存有环境变量字符串地址的指针数组的地址。")]),t._v(" "),a("p",[a("strong",[t._v("返回值")])]),t._v(" "),a("p",[t._v("exec函数族的函数执行成功后不会返回，调用失败时，会设置errno并返回-1，然后从原程序的调用点接着往下执行。")]),t._v(" "),a("p",[a("strong",[t._v("参数说明")])]),t._v(" "),a("ul",[a("li",[t._v("path：可执行文件的路径名字")]),t._v(" "),a("li",[t._v("arg：可执行程序所带的参数，第一个参数为可执行文件名字，没有带路径且arg必须以NULL结束")]),t._v(" "),a("li",[t._v("file：如果参数file中包含/，则就将其视为路径名，否则就按 PATH环境变量，在它所指定的各目录中搜寻可执行文件。")])]),t._v(" "),a("p",[t._v("exec族函数参数极难记忆和分辨，函数名中的字符会给我们一些帮助：")]),t._v(" "),a("ul",[a("li",[t._v("l : 使用参数列表")]),t._v(" "),a("li",[t._v("p：使用文件名，并从PATH环境进行寻找可执行文件")]),t._v(" "),a("li",[t._v("v：应先构造一个指向各参数的指针数组，然后将该数组的地址作为这些函数的参数。")]),t._v(" "),a("li",[t._v("e：多了envp[]数组，使用新的环境变量代替调用进程的环境变量")])]),t._v(" "),a("p",[t._v("一、带l的一类exac函数（l表示list），包括execl、execlp、execle，要求将新程序的每个命令行参数都说明为 一个单独的参数。这种参数表以空指针结尾。")]),t._v(" "),a("p",[t._v("例：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before exec\\n\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* /bin/ls：外部程序，这里是/bin目录的 ls 可执行程序，必须带上路径（相对或绝对）\n\t   ls：没有意义，如果需要给这个外部程序传参，这里必须要写上字符串，至于字符串内容任意\n\t   -a，-l，-h：给外部程序 ls 传的参数\n\t   NULL：这个必须写上，代表给外部程序 ls 传参结束\n\t*/")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 execl() 执行成功，下面执行不到，因为当前进程已经被执行的 ls 替换了")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execl"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"after exec\\n\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("二、带p的一类exac函数，包括execlp、execvp、execvpe，如果参数file中包含/，则就将其视为路径名，否则就按 PATH环境变量，")]),t._v(" "),a("p",[t._v("在它所指定的各目录中搜寻可执行文件。举个例子，"),a("code",[t._v("PATH=/bin:/usr/bin")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//文件execlp.c")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 第一个参数 "ls"，没有带路径名，在环境变量 PATH 里寻找这个可执行程序')]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其它参数用法和 execl() 一样")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execlp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n\tchar *arg[]={"ls", "-a", "-l", "-h", NULL};\n\texecvp("ls", arg);\n\t*/')]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execlp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("三、带v不带l的一类exac函数，包括execv、execvp、execve，应先构造一个指向各参数的指针数组，然后将该数组的地址作为这些函数的参数。")]),t._v(" "),a("p",[t._v("如 "),a("code",[t._v("char *arg[]")]),t._v(" 这种形式，且arg最后一个元素必须是NULL，例如 "),a("code",[t._v("char *arg[] = {“ls”,”-l”,NULL}")]),t._v(";")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// execv() 和 execl() 的用法基本是一样的，无非将列表传参，改为用指针数组")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// execl("/bin/ls", "ls", "-a", "-l", "-h", NULL);')]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 指针数组\n\t   ls：没有意义，如果需要给这个外部程序传参，这里必须要写上字符串，至于字符串内容任意\n\t   -a，-l，-h：给外部程序 ls 传的参数\n\t   NULL：这个必须写上，代表给外部程序 ls 传参结束\n\t*/")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /bin/ls：外部程序，这里是/bin目录的 ls 可执行程序，必须带上路径（相对或绝对）")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// arg： 上面定义的指针数组地址")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execv"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 第一个参数 "ls"，没有带路径名，在环境变量 PATH 里寻找这个可执行程序')]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其它参数用法和 execl() 一样")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execlp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-h"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n\tchar *arg[]={"ls", "-a", "-l", "-h", NULL};\n\texecvp("ls", arg);\n\t*/')]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execlp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br")])]),a("p",[t._v("四、带e的一类exac函数，包括execle、execvpe，可以传递一个指向环境字符串指针数组的指针。")]),t._v(" "),a("p",[t._v("参数例如 "),a("code",[t._v("char *env_init[] = {“AA=aa”,”BB=bb”,NULL}")]),t._v("; 带e表示该函数取envp[]数组，而不使用当前环境。")]),t._v(" "),a("p",[t._v("execle() 和 execve() 改变的是 exec 启动的程序的环境变量（只会改变进程的环境变量，不会影响系统的环境变量）")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exec.c")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getenv()")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getenv() 获取指定环境变量的值")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"before exec：USER=%s, HOME=%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"USER"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HOME"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指针数据")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"USER=MIKE"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HOME=/tmp"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ./mike：外部程序，当前路径的 mike 程序，通过 gcc mike.c -o mike 编译\n\t\tmike：这里没有意义\n\t\tNULL：给 mike 程序传参结束\n\t\tenv：改变 mike 程序的环境变量，正确来说，让 mike 程序只保留 env 的环境变量\n\t */")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("execle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./mike"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mike"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n\tchar *arg[]={"mike", NULL};\n\texecve("./mike", arg, env);\n\t*/')]),t._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("perror")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"execle"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 外部程序 mike.c")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdlib.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\nin the mike fun, after exec: \\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"USER=%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"USER"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HOME=%s\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getenv")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HOME"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br")])]),a("h2",{attrs:{id:"_1-14-ext4-文件系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-ext4-文件系统"}},[t._v("#")]),t._v(" 1.14 ext4 文件系统")]),t._v(" "),a("p",[t._v("TODO:")]),t._v(" "),a("h2",{attrs:{id:"_1-15-文件锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-文件锁"}},[t._v("#")]),t._v(" 1.15 文件锁")]),t._v(" "),a("h3",{attrs:{id:"_1-15-1-对整个文件锁定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-1-对整个文件锁定"}},[t._v("#")]),t._v(" 1.15.1 对整个文件锁定")]),t._v(" "),a("p",[t._v("flock - apply or remove an advisory lock on an open file")]),t._v(" "),a("p",[a("code",[t._v("int flock(int fd, int operation);")])]),t._v(" "),a("p",[t._v("id 是需要加锁的文件的描述符，operation 可以是下列值：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("LOCK_SH")]),t._v(" 共享锁，多个进程可以同时拥有对文件的共享锁。")]),t._v(" "),a("li",[a("code",[t._v("LOCK_EX")]),t._v(" 互斥锁，一个文件只能上一把互斥锁。")]),t._v(" "),a("li",[a("code",[t._v("LOCK_UN")]),t._v(" 解锁操作。")]),t._v(" "),a("li",[a("code",[t._v("LOCK_NB")]),t._v(" 如果进程不能获取指定的锁，函数将不阻塞，缺省时，进程将睡眠等待。")])]),t._v(" "),a("p",[t._v("共享锁用于不更改或不更新数据的操作（只读操作）")]),t._v(" "),a("h2",{attrs:{id:"_1-16-进程的结束"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-进程的结束"}},[t._v("#")]),t._v(" 1.16 进程的结束")]),t._v(" "),a("h3",{attrs:{id:"_1-16-1-exit-和-exit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-1-exit-和-exit"}},[t._v("#")]),t._v(" 1.16.1 exit 和 _exit")]),t._v(" "),a("p",[a("code",[t._v("void exit(int status);")])]),t._v(" "),a("p",[a("code",[t._v("void _exit(int status)")])]),t._v(" "),a("p",[t._v("status 是一个整型的参数，可以利用这个参数传递进程结束时的状态。通常用 0 表示正常结束，其他数值表示出现了错误，进程非正常结束。")]),t._v(" "),a("p",[t._v("再实际编程时，可以用 wait 系统调用接受子进程的返回值，进行相应的处理。")]),t._v(" "),a("p",[a("code",[t._v("_exit()")]),t._v(" 函数作用最简单，直接使进程终止运行，清除使用的内存空间，并销毁数据结构。")]),t._v(" "),a("p",[a("code",[t._v("exit()")]),t._v(" 函数则在这些基础上作了一些包装，推出前检查文件的打开情况，把文件缓冲区中的内容写回文件，清理 I/O 缓冲。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Using exit...\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the end"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@farsight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("exit_test2\nUsing exit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" This is the end\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@farsight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("#\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Using _exit...\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is the end"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@farsight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("# "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("_exit\nUsing _exit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root@farsight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("#\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h3",{attrs:{id:"_1-16-2-wait-waitpid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-2-wait-waitpid"}},[t._v("#")]),t._v(" 1.16.2 wait/waitpid")]),t._v(" "),a("p",[a("strong",[t._v("（1）wait函数")])]),t._v(" "),a("p",[t._v("调用该函数使进程阻塞，直到任一个子进程结束或者是该进程接收到了一个信号为止。如果该进程没有子进程或者其子进程已经结束，wait函数会立即返回。")]),t._v(" "),a("p",[t._v("waitpid函数")]),t._v(" "),a("p",[t._v("功能和wait函数类似。可以指定等待某个子进程结束以及等待的方式（阻塞或非阻塞）")]),t._v(" "),a("p",[t._v("头文件")]),t._v(" "),a("p",[a("code",[t._v("#include <sys/types.h>")]),t._v(" "),a("code",[t._v("#include <sys/wait.h>")])]),t._v(" "),a("p",[t._v("函数原型： "),a("code",[t._v("pid_t wait(int *status)")])]),t._v(" "),a("p",[t._v("参数：")]),t._v(" "),a("p",[t._v("status 是一个整型指针，指向的对象用来保存子进程推出时的状态。")]),t._v(" "),a("ul",[a("li",[t._v("status 若为空，则表示忽略子进程退出时的状态。")]),t._v(" "),a("li",[t._v("status 不为空，则表示保存子进程退出时的所有状态。")])]),t._v(" "),a("p",[t._v("此为可以用一些宏检测：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("状态")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("判断宏")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("取值宏")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("进程正常结束")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WIFEXITED(status)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WEXITSTATUS(status)")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("进程正常结束")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WIFSIGNALED(status)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WTERMSIG(status)")])])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("进程正常结束")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WIFSTOPPED(status)")])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("code",[t._v("WSTOPSIG(status)")])])])])]),t._v(" "),a("p",[t._v("WTERMSIG宏测试被执行后，若成功返回被终止的子进程的信号值。返回的信号值被定义在 sys/signals.h头文件中。")]),t._v(" "),a("p",[t._v("返回值：成功返回结束子进程的 pid 码。")]),t._v(" "),a("p",[a("strong",[t._v("（2）waitpid 函数")])]),t._v(" "),a("p",[t._v("一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁，而是留下一个称为僵尸进程(Zombie)的数据结构")]),t._v(" "),a("p",[t._v("(系统调用exit，它的作用是使进程退出，但也仅仅限于将一个正常的进程变成一个僵尸进程，并不能将其完全销毁)。")]),t._v(" "),a("p",[t._v("函数原型："),a("code",[t._v("pid_t waitpid(pid_t pid, int *status, int options);")])]),t._v(" "),a("p",[t._v("函数参数：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("pid")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(">0")]),t._v(" 只等待进程 ID 等于 pid 的子进程，只要指定的子进程还没有结束，waitpid 就会一直等下去。")]),t._v(" "),a("li",[a("code",[t._v("=-1")]),t._v("，等待任何一个子进程退出，和 "),a("code",[t._v("wait")]),t._v(" 作用一样。")]),t._v(" "),a("li",[a("code",[t._v("=0")]),t._v(" 等待组 ID 等于调用进程的组 ID 的任一子进程。")]),t._v(" "),a("li",[a("code",[t._v("< -1")]),t._v(" 等待其组 ID 等于 pid 的绝对值的任一子进程。")])])]),t._v(" "),a("li",[a("code",[t._v("status")]),t._v(" ，同 wait")]),t._v(" "),a("li",[a("code",[t._v("options")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("WNOHANG")]),t._v(" 若由 pid 指定的子进程并不立即可用，则 waitpid 不阻塞，此时返回值为 0。")]),t._v(" "),a("li",[a("code",[t._v("WUNTRACED")]),t._v(" 若某实现支持作业控制，则由 pid 指定的任意子进程状态已暂停，且其状态子暂停依赖还未报告过，则返回其状态。")]),t._v(" "),a("li",[a("code",[t._v("0")]),t._v(" 阻塞父进程，等待子进程退出。")]),t._v(" "),a("li",[t._v("判断子进程结束原因\n"),a("ul",[a("li",[a("code",[t._v("WIFEXITED")])]),t._v(" "),a("li",[a("code",[t._v("WIFSIGNALED")])]),t._v(" "),a("li",[a("code",[t._v("WIFSTOPPED")])]),t._v(" "),a("li",[a("code",[t._v("WSTOPSIG")])])])])])])]),t._v(" "),a("p",[t._v("进程组组号，等于父进程 pid")]),t._v(" "),a("p",[t._v("函数返回值：")]),t._v(" "),a("ul",[a("li",[t._v("正常：结束的子进程的进程号。")]),t._v(" "),a("li",[t._v("使用选项 WNOHANG 且没有子进程结束时：0")]),t._v(" "),a("li",[t._v("调用出错 -1，设置错误码")])]),t._v(" "),a("h2",{attrs:{id:"_1-17-守护进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-守护进程"}},[t._v("#")]),t._v(" 1.17 守护进程")]),t._v(" "),a("h3",{attrs:{id:"_1-17-1-守护进程和后台进程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-1-守护进程和后台进程的区别"}},[t._v("#")]),t._v(" 1.17.1 守护进程和后台进程的区别")]),t._v(" "),a("p",[a("strong",[t._v("守护进程与后台进程的区别")])]),t._v(" "),a("ul",[a("li",[t._v("守护进程已经完全脱离终端控制台了，而后台程序并未完全脱离终端，在终端未关闭前还是会往终端输出结果")]),t._v(" "),a("li",[t._v("守护进程在关闭终端控制台时不会受影响，而后台程序会随用户退出而停止，需要在以 "),a("code",[t._v("nohup command &")]),t._v(" 格式运行才能避免影响")])]),t._v(" "),a("p",[a("strong",[t._v("实现守护进程的方式")])]),t._v(" "),a("p",[t._v("要实现守护进程，一种方法是按守护进程的规则去编程，比较麻烦；另一种方法是仍然用普通方法编程，然后用nohup命令启动程序：")]),t._v(" "),a("p",[a("code",[t._v("nohup <程序名> &")])]),t._v(" "),a("p",[t._v("用nohup启动的进程，当控制台logout后，进程仍然继续运行，起到守护进程的作用（虽然它不是严格意义上的守护进程）。")]),t._v(" "),a("p",[t._v("默认情况下，使用nohup命令后，原程序的的标准输出被自动改向到当前目录下的nohup.out文件，起到了log的作用，实现了完整的守护进程功能。")]),t._v(" "),a("p",[a("strong",[t._v("为什么脱离终端？")])]),t._v(" "),a("p",[t._v("守护进程是个特殊的孤儿进程，这种进程脱离终端，为什么要脱离终端呢？\n之所以脱离于终端是为了避免进程被任何终端所产生的信息所打断，\n其在执行过程中的信息也不在任何终端上显示。由于在 Linux 中，\n每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依附于这个终端，\n这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会自动关闭。")]),t._v(" "),a("h3",{attrs:{id:"_1-17-2-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-2-介绍"}},[t._v("#")]),t._v(" 1.17.2 介绍")]),t._v(" "),a("p",[t._v("Daemon 进程，生存期较长的进程，通常独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。")]),t._v(" "),a("p",[t._v("守护进程常常在系统引导装入时启动，在系统关闭时终止。")]),t._v(" "),a("p",[t._v("在Linux中，每一个系统与用户进行交流的界面称为终端，每一个从此终端开始运行的进程都会依附于这个终端，这个终端就称为这些进程的控制终端，当控制终端被关闭时，相应的进程都会被自动关闭。")]),t._v(" "),a("p",[t._v("守护进程能够突破这种限制，它从被执行开始运转，直到整个系统关闭才会退出。如果想让某个进程不因为"),a("strong",[t._v("用户或终端")]),t._v("或其他的变化而受到影响，就必须把这个进程变成一个守护进程。")]),t._v(" "),a("p",[a("strong",[t._v("守护进程的一些特点")])]),t._v(" "),a("ul",[a("li",[t._v("守护进程基本上都是以超级用户启动（ UID 为 0 ）")]),t._v(" "),a("li",[t._v("没有控制终端（ TTY 为 ？）")]),t._v(" "),a("li",[t._v("终端进程组 ID 为 -1 （ TPGID 表示终端进程组 ID）")])]),t._v(" "),a("p",[t._v("一般情况下，守护进程可以通过以下方式启动：")]),t._v(" "),a("ul",[a("li",[t._v("在系统启动时由启动脚本启动，这些启动脚本通常放在 /etc/rc.d 目录下；")]),t._v(" "),a("li",[t._v("利用 inetd 超级服务器启动，如 telnet 等；")]),t._v(" "),a("li",[t._v("由 cron 定时启动以及在终端用 nohup 启动的进程也是守护进程。")])]),t._v(" "),a("h3",{attrs:{id:"_1-17-3-进程组和会话期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-3-进程组和会话期"}},[t._v("#")]),t._v(" 1.17.3 进程组和会话期")]),t._v(" "),a("p",[a("strong",[t._v("（1）进程组")])]),t._v(" "),a("p",[t._v("进程组是一个或多个进程的集合。进程组由进程组 ID 来唯一标识，除了进程号（PID）之外，进程组 ID 也是一个进程的必备属性之一。")]),t._v(" "),a("p",[t._v("每个进程组都有一个组长进程，"),a("strong",[t._v("组长进程的进程号")]),t._v("等于进程组 ID。")]),t._v(" "),a("p",[a("strong",[t._v("（2）会话期")])]),t._v(" "),a("p",[t._v("会话组是一个或多个进程组的集合。")]),t._v(" "),a("p",[t._v("通常一个会话开始于用户登录，种植于用户退出，在此期间该用户运行的所有进程都属于这个会话期。")]),t._v(" "),a("p",[a("strong",[t._v("（3）setsid()")])]),t._v(" "),a("p",[a("code",[t._v("setsid()")]),t._v(" 创建一个新会话，并担任该会话组的组长，调用setsid函数的目的：让进程摆脱原会话，原进程组，原终端的控制。如果，"),a("strong",[t._v("调用setsid的进程不是一个进程组的组长")]),t._v("，此函数创建一个新的会话期。")]),t._v(" "),a("p",[t._v("setsid 的调用者不能是 group leader。")]),t._v(" "),a("ul",[a("li",[t._v("摆脱原会话的控制。")]),t._v(" "),a("li",[t._v("摆脱原进程组的控制。")]),t._v(" "),a("li",[t._v("摆脱原控制终端的控制。")])]),t._v(" "),a("h3",{attrs:{id:"_1-17-4-步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-4-步骤"}},[t._v("#")]),t._v(" 1.17.4 步骤")]),t._v(" "),a("p",[a("strong",[t._v("（1）创建子进程，结束父进程")])]),t._v(" "),a("p",[t._v("子进程变成孤儿进程，变成 init 进程的子进程。形式上脱离终端控制，在后台工作。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("pid"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父进程退出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("strong",[t._v("（2）setsid，子进程成为新会话过程的leader 进程")])]),t._v(" "),a("p",[t._v("子进程全盘拷贝了父进程的会话期、进程组、控制终端，父进程退出了，但会话期、进程组、控制终端没有改变。")]),t._v(" "),a("p",[t._v("子进程继续运行，父进程退出的时候，将会产生 SIGHUP 信号。")]),t._v(" "),a("p",[t._v("setsid() 调用成功后，进程成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。由于会话过程对控制终端的独占性，进程同时与控制终端脱离。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setsid")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("现在 sid == pid == pgid，现在收不到终端的信号。")]),t._v(" "),a("p",[a("strong",[t._v("（3）进程重新打开控制终端")])]),t._v(" "),a("p",[t._v("现在进程成为无终端的会话组长，但是如果再打开一个终端，将会成为它的控制终端。")]),t._v(" "),a("p",[t._v("因为进程打开一个控制终端的前台条件是该进程必须是会话组长。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 父进程退出")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pid "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("exit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("结束子进程，第二子进程不再是会话组长。pid != sid，无法打开新的控制终端。")]),t._v(" "),a("p",[a("strong",[t._v("（4）关闭打开的文件描述符")])]),t._v(" "),a("p",[t._v("进程从创建它的父进程那里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成进程所在的文件系统无法卸下以及引起无法预料的错误。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("size_t")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sysconf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_SC_OPEN_MAX"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("（5）更改工作目录")])]),t._v(" "),a("p",[t._v("当进程产生错误的时候，将错误信息记录在当前目录的core文件，守护进程的特点一般会一直会打开当前目录。 解决方法，找一个不可能被卸载的目录。")]),t._v(" "),a("p",[t._v("使用fork创建的子进程继承了父进程的当前工作目录。由于在进程运行过程中，当前目录所在的文件系统是不能卸载的，这对以后的使用会造成诸多的麻烦(比如进入单用户模式)。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chdir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("（6）消除 umask 的影响")])]),t._v(" "),a("p",[t._v("进程从创建它的父进程那里继承了文件创建掩码。它可能修改守护进程所创建的文件的存取权限。为防止这一点，将文件创建掩码清除：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("umask")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("（7）重新定位 I/O 描述符")])]),t._v(" "),a("p",[t._v("将标准输入、标准输出、标准错误重定向到 "),a("code",[t._v("/dev/null")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" fd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("open")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/dev/null"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("O_RDWR"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"_1-18-进程和线程的选择与区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-18-进程和线程的选择与区别"}},[t._v("#")]),t._v(" 1.18 进程和线程的选择与区别")]),t._v(" "),a("p",[t._v("进程是资源分配的最小单位，线程是CPU调度的最小单位。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("对比维度")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("多进程")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("多线程")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("总结")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("数据共享、同步")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据共享复杂，需要用 IPC，数据是分开的，同步简单")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("共享进程数据，数据共享简单，但是同步复杂")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("各有优势")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("内存、CPU")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("占用内存多，切换复杂，CPU利用率低")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("占用内存少，切换简单，CPU利用率高")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("线程占优")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("创建销毁、切换")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("创建销毁、切换复杂、速度慢")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("创建销毁、切换简单，速度很快")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("线程占优")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("编程、调试")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("编程简单，调试简单")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("编程复杂，调试复杂")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("进程占优")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("可靠性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("进程间不会互相影响")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一个线程挂掉将会导致整个进程挂掉")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("进程占优")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("分布式")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("适用于多核、多机分布式，扩展多机比较简单")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("适用于多核分布式")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("进程占优")])])])]),t._v(" "),a("p",[a("strong",[t._v("（1）需要频繁创建销毁的优先用线程")])]),t._v(" "),a("p",[t._v("如 Web 服务器，来一个连接建立一个线程，断了就销毁线程。")]),t._v(" "),a("p",[a("strong",[t._v("（2）需要进行大量计算的优先用线程")])]),t._v(" "),a("p",[t._v("如图像处理、算法处理。")]),t._v(" "),a("p",[a("strong",[t._v("（3）强相关的处理用线程，弱相关的处理用进程")])]),t._v(" "),a("p",[t._v("一般的Server需要完成如下任务：消息收发、消息处理。“消息收发”和“消息处理”就是弱相关的任务，\n而“消息处理”里面可能又分为“消息解码”、“业务处理”，这两个任务相对来说相关性就要强多了。\n因此“消息收发”和“消息处理”可以分进程设计，“消息解码”、“业务处理”可以分线程设计。")]),t._v(" "),a("h2",{attrs:{id:"_1-19-dup-和-dup2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-19-dup-和-dup2"}},[t._v("#")]),t._v(" 1.19 dup() 和 dup2()")]),t._v(" "),a("p",[a("strong",[t._v("dup()")])]),t._v(" "),a("p",[t._v("函数原型：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" oldfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("打开一个新的最小文件描述符，指向和 oldfd 同一个文件，共享文件偏移量和文件状态。")]),t._v(" "),a("p",[t._v("失败返回 -1。")]),t._v(" "),a("p",[a("strong",[t._v("dup2()")])]),t._v(" "),a("p",[t._v("函数原型：")]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<unistd.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dup2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" oldfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newfd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("dup2 把指定的 newfd 也指向 oldfd 指向的文件，也就是说，执行完dup2之后，有newfd和oldfd同时指向同一个文件，共享文件偏移量和文件状态。")])])}),[],!1,null,null,null);s.default=e.exports}}]);