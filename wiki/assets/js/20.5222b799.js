(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{294:function(s,t,a){"use strict";a.r(t);var _=a(14),v=Object(_.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_2-1-c-语言版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-c-语言版本"}},[s._v("#")]),s._v(" 2.1 C 语言版本 "),a("Badge",{attrs:{text:"TODO",type:"warning"}})],1),s._v(" "),a("p",[s._v("TODO: 标准介绍，各标准特性")]),s._v(" "),a("h2",{attrs:{id:"_2-2-编译过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-编译过程"}},[s._v("#")]),s._v(" 2.2 编译过程")]),s._v(" "),a("p",[a("code",[s._v("gcc x.c")]),s._v(" 默认的产物是 "),a("code",[s._v("a.out")]),s._v("，assembler output 的缩写。")]),s._v(" "),a("h3",{attrs:{id:"_2-2-1-预处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-预处理"}},[s._v("#")]),s._v(" 2.2.1 预处理")]),s._v(" "),a("p",[s._v("调用预处理器"),a("code",[s._v("cpp")]),s._v("，完成宏展开、头文件包含、处理条件编译、删除注释等工作。")]),s._v(" "),a("p",[s._v("一些预定义的宏：")]),s._v(" "),a("p",[a("code",[s._v("__DATE__")]),s._v(" 进行预处理的日期（“Mmm dd yyyy”形式的字符串文字，如May 27 2006）")]),s._v(" "),a("p",[a("code",[s._v("__FILE__")]),s._v(" 代表当前源代码文件名的字符串文字 ，包含了详细路径，如 "),a("code",[s._v("G:/program/study/c+/test1.c")])]),s._v(" "),a("p",[a("code",[s._v("__LINE__")]),s._v(" 代表当前源代码中的行号的整数常量")]),s._v(" "),a("p",[a("code",[s._v("__TIME__")]),s._v(" 源文件编译时间，格式微“hh：mm：ss”，如：09:11:10；")]),s._v(" "),a("p",[a("code",[s._v("__FUNCTION__")]),s._v(" 当前所在函数名")]),s._v(" "),a("p",[a("code",[s._v("gcc -E -o a.i a.c")])]),s._v(" "),a("h3",{attrs:{id:"_2-2-2-编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-编译"}},[s._v("#")]),s._v(" 2.2.2 编译")]),s._v(" "),a("p",[s._v("调用编译器 "),a("code",[s._v("cc1")]),s._v("，把源程序翻译成目标系统的汇编文件 "),a("code",[s._v(".s")]),s._v("。")]),s._v(" "),a("p",[s._v("将预处理得到的程序代码，经过一系列的词法分析、语法分析、语义分析以及优化，加工为当前机器支持的汇编代码。")]),s._v(" "),a("p",[a("code",[s._v("gcc -S -o a.s a.i")])]),s._v(" "),a("h3",{attrs:{id:"_2-2-3-汇编"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-汇编"}},[s._v("#")]),s._v(" 2.2.3 汇编")]),s._v(" "),a("p",[s._v("调用汇编器 "),a("code",[s._v("as")]),s._v("，将汇编指令翻译成机器指令，生成可重定位目标文件。")]),s._v(" "),a("p",[a("code",[s._v("gcc -c -o a.o a.s")])]),s._v(" "),a("h3",{attrs:{id:"_2-2-4-链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-链接"}},[s._v("#")]),s._v(" 2.2.4 链接")]),s._v(" "),a("p",[s._v("调用链接器 "),a("code",[s._v("ld")]),s._v(" ，将生成的可重定位文件与相关库文件链接，生成可执行目标文件。")]),s._v(" "),a("ol",[a("li",[s._v("符号分析")]),s._v(" "),a("li",[s._v("重定位。（重新分配地址）")])]),s._v(" "),a("p",[a("code",[s._v("gcc -o a a.o")])]),s._v(" "),a("h2",{attrs:{id:"_2-3-宏"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-宏"}},[s._v("#")]),s._v(" 2.3 宏 "),a("Badge",{attrs:{text:"TODO",type:"warning"}})],1),s._v(" "),a("p",[s._v("避免使用宏，尽量使用编译器而不用预处理。")]),s._v(" "),a("p",[s._v("多行的宏，需要用下面的结构包围起来：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("TODO: c99 的变参宏")]),s._v(" "),a("h2",{attrs:{id:"_2-4-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-字符串"}},[s._v("#")]),s._v(" 2.4 字符串")]),s._v(" "),a("p",[s._v("不要将字符串常量用于非 "),a("code",[s._v("const")]),s._v(" 的字符串变量。")]),s._v(" "),a("p",[s._v("字符串常量是 "),a("code",[s._v("const char*")]),s._v(" 类型。")]),s._v(" "),a("p",[s._v("字符数组可以看作 "),a("code",[s._v("char* const")]),s._v(" 类型，数组名执行地址不可变，但可以通过指针修改字符串。")]),s._v(" "),a("h2",{attrs:{id:"_2-5-内存映像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-内存映像"}},[s._v("#")]),s._v(" 2.5 内存映像")]),s._v(" "),a("p",[s._v("CPU是计算机的核心，决定了计算机的数据处理能力和寻址能力。CPU一个时钟，也就是一次能处理的数据的大小由寄存器的位数和数据总线的宽度决定，通常所说的CPU的32位、64位可以理解为寄存器的位数，也可以理解为数据总线的宽度。")]),s._v(" "),a("p",[s._v("​以32位CPU为例子，即一次能处理32Bit，即4个字节的数据。典型的32位处理器是Intel 80386,它的数据总线宽度有32位，地址总线宽度也是32位，寻址能力为2"),a("sup",[s._v("32")]),s._v(" = 4GB")]),s._v(" "),a("p",[s._v("数据总线用于在CPU和内存之间传输数据，地址总线用于在内存上定位数据，地址总线的宽度往往随着数据总线的宽度增大而增大，以访问更大的内存。")]),s._v(" "),a("p",[s._v("​同时CPU支持的物理内存只是理论上的数据，实际应用中会受到操作系统的限制，比如说win7 64位家庭版最大支支持8GB和16GB的物理内存，win7 64位专业版可以支持到192GB的物理内存。但是32位CPU寻址能力没有这么大，所以要通过两次寻址来实现。")]),s._v(" "),a("p",[s._v("所谓的虚拟空间，就是程序可以使用的虚拟地址的有效范围。虚拟地址和物理地址的映射关系由操作系统决定，相应地，虚拟地址空间的大小也由操作系统决定，但还会受到编译模式的影响。")]),s._v(" "),a("p",[s._v("windows和Linux都会对虚拟地址进行了限制，仅使用虚拟地址的低48位（6个字节），总的虚拟空间大小位为2"),a("sup",[s._v("48")]),s._v("=256TB，而且任何虚拟地址的48位至63位必须与47位一致。")]),s._v(" "),a("p",[s._v("​如果内存大于物理内存，或者内存中剩余的空间不够容纳当前的程序，那么操作系统会将内存中用不到的一部分数据写入磁盘，等需要的时候再读取回来。程序只管使用4GB的内存，而不用关心硬件资源。")]),s._v(" "),a("p",[s._v("32位内存映像如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/c/%E5%86%85%E5%AD%98%E6%98%A0%E5%83%8F.png",alt:""}})]),s._v(" "),a("p",[a("code",[s._v("ulimit -s")]),s._v(" 查看栈空间大小，单位 "),a("code",[s._v("Mb")]),s._v("。")]),s._v(" "),a("p",[s._v("c语言四大内存分区")]),s._v(" "),a("ul",[a("li",[s._v("栈区（stack）:存放函数形参和局部变量（auto类型），由编译器自动分配和释放（"),a("code",[s._v(".stack")]),s._v("）")]),s._v(" "),a("li",[s._v("堆区（heap）:该区由程序员申请后使用，需要手动释放否则会造成内存泄漏。如果程序员没有手动释放，那么程序结束时可能由OS回收。（"),a("code",[s._v(".heap")]),s._v("）")]),s._v(" "),a("li",[s._v("全局/静态存储区：存放全局变量和静态变量（包括静态全局变量与静态局部变量），初始化的全局变量和静态局部变量放在一块，未初始化的放在另一块（"),a("code",[s._v(".bss")]),s._v("，"),a("code",[s._v(".data")]),s._v("），编译时就分配好了。")]),s._v(" "),a("li",[s._v("常量区：常量在统一运行被创建，常量区的内存是只读的，程序结束后由系统释放。（"),a("code",[s._v(".rodata")]),s._v(")程序代码区：存放程序的二进制代码，内存由系统管理（"),a("code",[s._v(".text")]),s._v("）")])]),s._v(" "),a("p",[s._v("其中rodata区和text区在加载时会合并到一个段中，该段称为常量区，该区域的内容只允许读，不允许修改。")]),s._v(" "),a("p",[s._v("data区和bss区在加载时合并到一个段中，该段被称为全局区。")]),s._v(" "),a("p",[s._v("在64位环境下，虚拟地址空间大小为 256TB，Linux 将高 128TB 的空间分配给内核使用，而将低 128TB 的空间分配给用户程序使用。")]),s._v(" "),a("p",[s._v("64位内存空间分布情况如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"/c/64%E4%BD%8D%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80.jpg",alt:""}})]),s._v(" "),a("p",[s._v("注意：")]),s._v(" "),a("p",[s._v("栈增长方向是：高地址向低地址。")]),s._v(" "),a("p",[s._v("堆增长方向是：低地址向高地址。")]),s._v(" "),a("p",[s._v("这个上下文里说的“栈”是函数调用栈，是以“栈帧”（stack frame）为单位的。每一次函数调用会在栈上分配一个新的栈帧，在这次函数调用结束时释放其空间。")]),s._v(" "),a("p",[s._v("被调用函数（callee）的栈帧相对调用函数（caller）的栈帧的位置反映了栈的增长方向：如果被调用函数的栈帧比调用函数的在更低的地址，那么栈就是向下增长；反之则是向上增长。而在一个栈帧内，")]),s._v(" "),a("p",[s._v("局部变量是如何分布到栈帧里的（所谓栈帧布局，stack frame layout），这完全是编译器的自由。")]),s._v(" "),a("p",[s._v("至于数组元素与栈的增长方向：C与C++语言规范都规定了数组元素是分布在连续递增的地址上的。")]),s._v(" "),a("p",[s._v("每个函数都是一个栈帧，栈的分配是按着这个来的，而栈帧里是怎么分配完全看编译器来。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/c/%E6%A0%88%E5%A2%9E%E9%95%BF.png",alt:""}})]),s._v(" "),a("p",[s._v("内核空间（1G，0xc0000000 ~ 0xffffffff)")]),s._v(" "),a("p",[s._v("用户空间（3G, 0x00000000 ~ 0xC0000000)")]),s._v(" "),a("p",[s._v("当进程/线程运行在内核空间时就处于内核态，而进程/线程运行在用户空间时则处于用户态。")]),s._v(" "),a("h2",{attrs:{id:"_2-6-二进制文件和文本文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-二进制文件和文本文件"}},[s._v("#")]),s._v(" 2.6 二进制文件和文本文件")]),s._v(" "),a("p",[s._v("数据在物理上的存储方式是二进制的，即由0/1字符串构成。而我们解读这些的方式有两种：基于字符编码，和基于值编码。")]),s._v(" "),a("h3",{attrs:{id:"_2-6-1-基于字符编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-1-基于字符编码"}},[s._v("#")]),s._v(" 2.6.1 基于字符编码")]),s._v(" "),a("p",[s._v("即每个我们肉眼可读的字符都有唯一对应的0/1字符串，我们读、写这些字符都使用同一套编码方式。")]),s._v(" "),a("p",[s._v("如果某文件的数据使用基于字符的编码，那么该文件即为“文本文件”。")]),s._v(" "),a("p",[s._v("文本文件则在二进制的基础上，进行了字符编码，因此，我们看到的诸如 .txt 以及程序文件都是字符形式。")]),s._v(" "),a("p",[s._v("常见的基于字符的编码有：ASCII码，Unicode编码。")]),s._v(" "),a("h3",{attrs:{id:"_2-6-2-基于值编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-2-基于值编码"}},[s._v("#")]),s._v(" 2.6.2 基于值编码")]),s._v(" "),a("p",[s._v("可以理解为自定义的编码。")]),s._v(" "),a("p",[s._v("如果某文件的数据使用基于值的编码，那么该文件即为“二进制文件”。不同的应用程序对二进制文件中的每个值会有不同的解读，就像不同的编码对文本文件中的每一/多个字节有不同的解读。")]),s._v(" "),a("p",[s._v("常见的二进制文件有可执行程序、图形、图像、声音等等。")]),s._v(" "),a("h2",{attrs:{id:"_2-7-浮点数的存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-浮点数的存储"}},[s._v("#")]),s._v(" 2.7 浮点数的存储")]),s._v(" "),a("p",[s._v("32位下的浮点数存储：")]),s._v(" "),a("p",[s._v("符号位 1 + 指数位（8）+小数位（24）")]),s._v(" "),a("p",[s._v("IEEE754规定, 指数位用于表示[-127, 128]范围内的指数")]),s._v(" "),a("p",[s._v("规定: 在32位单精度类型中, 这个偏移量是127. 在64位双精度类型中, 偏移量是1023. 所以, 这里的偏移量是127。")]),s._v(" "),a("p",[s._v("有了偏移量, 指数位中始终都是一个非负整数。")]),s._v(" "),a("h2",{attrs:{id:"_2-8-位域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-位域"}},[s._v("#")]),s._v(" 2.8 位域")]),s._v(" "),a("p",[s._v("有些数据在存储时并不需要占用一个完整的字节，只需要占用一个或几个二进制位即可。例如开关只有通电和断电两种状态，用 0 和 1 表示足以，也就是用一个二进位。正是基于这种考虑，C语言又提供了一种叫做位域的数据结构。")]),s._v(" "),a("p",[s._v("在结构体定义时，我们可以指定某个成员变量所占用的二进制位数（Bit），这就是位域。")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("bs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint32_t")]),s._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("uint8_t")]),s._v(" ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("都定义为 "),a("code",[s._v("unsigned")]),s._v(" 类型。")]),s._v(" "),a("p",[s._v("位域技术就是在成员变量所占用的内存中选出一部分位宽来存储数据。")]),s._v(" "),a("p",[s._v("C99规定int、unsigned int和 _Bool 可以作为位域类型，但编译器几乎都对此作了扩展。")]),s._v(" "),a("ol",[a("li",[s._v("如果一个字节所剩空间不够存放另一位域时，应从下一单元起存放该位域。也可以有意使某位域从下一单元开始。")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("bs")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*空域*/")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*从下一单元开始存放*/")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("空域用 0 填充单元剩下的空间。")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("位域的长度不能大于数据类型本身的长度，比如int类型就能超过32位二进位。")]),s._v(" "),a("li",[s._v("位域可以无位域名，这时它只用来作填充或调整位置。无名的位域是不能使用的。")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("k")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*该2位不能使用*/")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("使用位域的主要目的是压缩存储，其大致规则为：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("如果相邻位域字段的类型相同，且其位宽之和小于类型的sizeof大小，则后面的字段将紧邻前一个字段存储，直到不能容纳为止")])]),s._v(" "),a("li",[a("p",[s._v("如果相邻位域字段的类型相同，但其位宽之和大于类型的sizeof大小，则后面的字段将从新的存储单元开始，其偏移量为其类型大小的整数倍；")])]),s._v(" "),a("li",[a("p",[s._v("如果相邻的位域字段的类型不同，则各编译器的具体实现有差异，VC6采取不压缩方式，tdm-gcc，GCC采取压缩方式；")])]),s._v(" "),a("li",[a("p",[s._v("如果位域字段之间穿插着非位域字段，则不进行压缩；")])]),s._v(" "),a("li",[a("p",[s._v("整个结构体的总大小为最宽基本类型成员大小的整数倍。")])])]),s._v(" "),a("h2",{attrs:{id:"_2-9-断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-断言"}},[s._v("#")]),s._v(" 2.9 断言")]),s._v(" "),a("p",[a("code",[s._v("assert")]),s._v("宏的原型定义在"),a("code",[s._v("assert.h")]),s._v("中，其作用是如果它的条件返回错误，则终止程序执行。")]),s._v(" "),a("p",[a("code",[s._v("assert")]),s._v("的作用是现计算表达式 "),a("code",[s._v("expression")]),s._v(" ，如果其值为假（即为0），那么它先向 "),a("code",[s._v("stderr")]),s._v(" 打印一条出错信息,然后通过调用 "),a("code",[s._v("abort")]),s._v(" 来终止程序运行。")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("NDEBUG")]),s._v(" 宏关闭，在调试结束后，可以通过在包含 "),a("code",[s._v("#include")]),s._v(" 的语句之前插入 "),a("code",[s._v("#define NDEBUG")]),s._v(" 来禁用 "),a("code",[s._v("assert")]),s._v(" 调用。")]),s._v(" "),a("p",[a("code",[s._v("gcc -DNDEBUG")])]),s._v(" "),a("p",[a("code",[s._v("assert")]),s._v(" 的缺点是，频繁调用会极大的影响程序的性能，增加额外的开销。")]),s._v(" "),a("h2",{attrs:{id:"_2-10-变参函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-变参函数"}},[s._v("#")]),s._v(" 2.10 变参函数 "),a("Badge",{attrs:{text:"TODO",type:"warning"}})],1),s._v(" "),a("p",[s._v("TODO: 补充")]),s._v(" "),a("h2",{attrs:{id:"_2-11-内存对齐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-内存对齐"}},[s._v("#")]),s._v(" 2.11 内存对齐")]),s._v(" "),a("p",[s._v("(1) 性能原因：数据结构(尤其是栈)应该尽可能地在自然边界上对齐。原因在于，为了访问未对齐的内存，处理器需要作两次内存访问；而对齐的内存访问仅需要一次访问。")]),s._v(" "),a("p",[s._v("(2) 平台原因：不是所有的硬件平台都能访问任意地址上的任意数据的；某些硬件平台只能在某些地址处取某些特定类型的数据，否则抛出硬件异常。")]),s._v(" "),a("p",[s._v("(3) 空间原因：没有进行内存对齐的结构体或类会浪费一定的空间，当创建对象越多时，消耗的空间越多。")]),s._v(" "),a("p",[s._v("如果一个变量的内存地址正好位于它长度的整数倍，他就被称做自然对齐。")]),s._v(" "),a("p",[s._v("在设置结构体或类时，不考虑内存对齐问题，会浪费一些空间。")]),s._v(" "),a("p",[s._v("对齐规则：")]),s._v(" "),a("ol",[a("li",[s._v("struct内部每个成员按自身大小对齐，起始地址是自身宽度的整数倍。")]),s._v(" "),a("li",[s._v("struct末尾紧贴着一个相同类型的struct，也能够使下一个struct内成员对齐。")]),s._v(" "),a("li",[s._v("填充的值为垃圾值，非空。")])]),s._v(" "),a("p",[s._v("永远不要用 "),a("code",[s._v("pragma pack")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("pragma")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("push"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 保存当前的对齐方式")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("pragma")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("pragma")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("pop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("short")]),s._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("h2",{attrs:{id:"_2-12-联合体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-12-联合体"}},[s._v("#")]),s._v(" 2.12 联合体")]),s._v(" "),a("p",[s._v("联合体大小是以所占空间最大的为标准分配空间。")]),s._v(" "),a("h2",{attrs:{id:"_2-13-register-存储类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-13-register-存储类型"}},[s._v("#")]),s._v(" 2.13 register 存储类型")]),s._v(" "),a("p",[s._v("直接存在 CPU 的寄存器中。")]),s._v(" "),a("h2",{attrs:{id:"_2-14-数组指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-14-数组指针"}},[s._v("#")]),s._v(" 2.14 数组指针")]),s._v(" "),a("p",[s._v("对二维数组的定义，第一维的长度是可以缺省的，但是第二维不可缺省。")]),s._v(" "),a("p",[s._v("对数组取地址，指针类型就是数组指针。")]),s._v(" "),a("p",[a("code",[s._v("int arr[][4] = {0};")])]),s._v(" "),a("p",[a("code",[s._v("int (*p)[4] = arr")])]),s._v(" "),a("h2",{attrs:{id:"_2-15-数组名和指针的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-15-数组名和指针的区别"}},[s._v("#")]),s._v(" 2.15 数组名和指针的区别")]),s._v(" "),a("p",[s._v("数组名的含义：")]),s._v(" "),a("ol",[a("li",[s._v("数组在内存空间的名称。")]),s._v(" "),a("li",[s._v("数组的起始地址。")])]),s._v(" "),a("p",[s._v("区别一：")]),s._v(" "),a("ol",[a("li",[s._v("对数组名取地址得到的是数组所指元素的地址。")]),s._v(" "),a("li",[s._v("对指针取地址得到的是指针变量自身的地址。")])]),s._v(" "),a("p",[s._v("区别二：")]),s._v(" "),a("ol",[a("li",[s._v("数组名是常量指针。")]),s._v(" "),a("li",[s._v("指针是变量指针。")])]),s._v(" "),a("p",[s._v("区别三：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("sizfof(数组名)")]),s._v(" 得到的整个数组的字节数。")]),s._v(" "),a("li",[a("code",[s._v("sizeof(指针)")]),s._v(" 得到的是指针类型的字节数。")])]),s._v(" "),a("p",[s._v("指针的访问效率远远高于数组名的访问效率。")]),s._v(" "),a("p",[s._v("对指针进行加法（减法）运算时，它前进（后退）的步长与它指向的数据类型有关。")]),s._v(" "),a("h2",{attrs:{id:"_2-16-字节序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-16-字节序"}},[s._v("#")]),s._v(" 2.16 字节序")]),s._v(" "),a("p",[s._v("计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序。")]),s._v(" "),a("p",[s._v("但是，人类还是习惯读写大端字节序。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。")]),s._v(" "),a("p",[s._v("字节序是由 CPU 决定的。")]),s._v(" "),a("p",[s._v("对于多字节的数据，在内存中存储时，存放字节的顺序为字节序。")]),s._v(" "),a("p",[s._v("大端序")]),s._v(" "),a("p",[s._v("高位放在低地址，低位放在高地址。")]),s._v(" "),a("p",[s._v("小端序。")]),s._v(" "),a("p",[s._v("高位放在高地址，地位放在低地址。")]),s._v(" "),a("p",[s._v("判断字节序：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdint.h>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("int32_t")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("int8_t")]),s._v(" ch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x00000001")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ch "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小端序\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"大端序\\n"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("h2",{attrs:{id:"_2-17-位运算取余"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-17-位运算取余"}},[s._v("#")]),s._v(" 2.17  位运算取余")]),s._v(" "),a("p",[s._v("位运算适用于除数是 2"),a("sup",[s._v("n")])]),s._v(" "),a("p",[s._v("的情况。对 2"),a("sup",[s._v("n")])]),s._v(" "),a("p",[s._v("取余，就预示着数字向右移 n 位，这右移的 n 位就是余数。")]),s._v(" "),a("h2",{attrs:{id:"_2-18-补码的运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-18-补码的运算"}},[s._v("#")]),s._v(" 2.18 补码的运算")]),s._v(" "),a("p",[s._v("补码减法运算的公式： "),a("code",[s._v("[ x －y ] 补＝ [ x ] 补－ [ y ] 补＝ [ x ] 补＋ [ －y ] 补")])]),s._v(" "),a("h2",{attrs:{id:"_2-19-整型提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-19-整型提升"}},[s._v("#")]),s._v(" 2.19 整型提升")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("K&R")]),s._v(" 和 "),a("code",[s._v("C89")]),s._v(" 的早期实现中，基于 "),a("code",[s._v("short")]),s._v(" 和 "),a("code",[s._v("char")]),s._v(" 的算术运算陷入两难的困境，因为可能会产生两种不同的结果。因此，在C99中很明确地定义了整型提升的规则. 如果int能够表示原始类型中的所有数值，那么这个数值就被转成int型，否则，它被转成 "),a("code",[s._v("unsigned int")]),s._v(" 型。这种规则被称为整型提升。所有其它类型都不会被整型提升改变。")]),s._v(" "),a("p",[s._v("表达式中的字符型和短整型操作数在使用之前被转换为普通类型，这种转换称为整形提升。")]),s._v(" "),a("p",[a("code",[s._v("char")]),s._v(" 和 "),a("code",[s._v("short")]),s._v(" 在参与运算时，均是先转换为 "),a("code",[s._v("int")]),s._v(" 再进行。")]),s._v(" "),a("p",[s._v("通常情况下，在对int类型的数值作运算时，CPU的运算速度是最快的。在x86上，32位算术运算的速度比16位算术运算的速度快一倍。C语言是一个注重效率的语言，所以它会作整型提升，使得程序的运行速度尽可能地快。")]),s._v(" "),a("h2",{attrs:{id:"_2-20-bool-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-20-bool-类型"}},[s._v("#")]),s._v(" 2.20 _Bool 类型")]),s._v(" "),a("p",[s._v("C99 中，提供了 "),a("code",[s._v("_Bool")]),s._v(" 类型，"),a("code",[s._v("_Bool")]),s._v(" 只能赋值为 0 或 1，非 0 的值都会被存储为 1。")]),s._v(" "),a("h2",{attrs:{id:"_2-21-占位符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-21-占位符"}},[s._v("#")]),s._v(" 2.21 占位符")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("%c")]),s._v("：字符。")]),s._v(" "),a("li",[a("code",[s._v("%d")]),s._v("：十进制整数。")]),s._v(" "),a("li",[a("code",[s._v("%e")]),s._v("：使用科学计数法的浮点数，指数部分的e为小写。")]),s._v(" "),a("li",[a("code",[s._v("%E")]),s._v("：使用科学计数法的浮点数，指数部分的E为大写。")]),s._v(" "),a("li",[a("code",[s._v("%i")]),s._v("：整数，可读取非十进制整数。")]),s._v(" "),a("li",[a("code",[s._v("%f")]),s._v("：小数（包含float类型和double类型）。")]),s._v(" "),a("li",[a("code",[s._v("%g")]),s._v("：6个有效数字的浮点数。整数部分一旦超过6位，就会自动转为科学计数法，指数部分的e为小写。")]),s._v(" "),a("li",[a("code",[s._v("%G")]),s._v("：等同于%g，唯一的区别是指数部分的E为大写。")]),s._v(" "),a("li",[a("code",[s._v("%hd")]),s._v("：十进制 short int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%ho")]),s._v("：八进制 short int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%hx")]),s._v("：十六进制 short int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%hu")]),s._v("：unsigned short int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%ld")]),s._v("：十进制 long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%lo")]),s._v("：八进制 long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%lx")]),s._v("：十六进制 long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%lu")]),s._v("：unsigned long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%lld")]),s._v("：十进制 long long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%llo")]),s._v("：八进制 long long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%llx")]),s._v("：十六进制 long long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%llu")]),s._v("：unsigned long long int 类型。")]),s._v(" "),a("li",[a("code",[s._v("%Le")]),s._v("：科学计数法表示的 long double 类型浮点数。")]),s._v(" "),a("li",[a("code",[s._v("%Lf")]),s._v("：long double 类型浮点数。")]),s._v(" "),a("li",[a("code",[s._v("%lf")]),s._v(": double")]),s._v(" "),a("li",[a("code",[s._v("%n")]),s._v("：已输出的字符串数量。该占位符本身不输出，只将值存储在指定变量之中。")]),s._v(" "),a("li",[a("code",[s._v("%o")]),s._v("：八进制整数。")]),s._v(" "),a("li",[a("code",[s._v("%p")]),s._v("：指针。")]),s._v(" "),a("li",[a("code",[s._v("%s")]),s._v("：字符串。")]),s._v(" "),a("li",[a("code",[s._v("%u")]),s._v("：无符号整数（unsigned int）。")]),s._v(" "),a("li",[a("code",[s._v("%x")]),s._v("：十六进制整数。")]),s._v(" "),a("li",[a("code",[s._v("%zu")]),s._v("："),a("code",[s._v("size_t")]),s._v("类型。")]),s._v(" "),a("li",[a("code",[s._v("%zd")]),s._v(": "),a("code",[s._v("ssize_t")]),s._v(" 类型。")]),s._v(" "),a("li",[a("code",[s._v("%%")]),s._v("：输出一个百分号。")]),s._v(" "),a("li",[a("code",[s._v("%lc")]),s._v("：打印宽字符。")]),s._v(" "),a("li",[a("code",[s._v("%ls")]),s._v("：打印宽字符串。")])]),s._v(" "),a("p",[a("code",[s._v("%c")]),s._v(" 和 "),a("code",[s._v("%hhd")]),s._v(" 区别：二者针对类型都是单字节整数，也就是"),a("code",[s._v("char")]),s._v("或者"),a("code",[s._v("unsigned char")]),s._v("。不过"),a("code",[s._v("%c")]),s._v("在输入输出的时候，是按照字符操作的。"),a("code",[s._v("%hhd")]),s._v("是按照整数操作。")]),s._v(" "),a("h2",{attrs:{id:"_2-22-输出格式控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-22-输出格式控制"}},[s._v("#")]),s._v(" 2.22 输出格式控制")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("-")]),s._v("：字段宽度内左对齐。")]),s._v(" "),a("li",[a("code",[s._v("+")]),s._v("：显示正负号。")]),s._v(" "),a("li",[a("code",[s._v("#")]),s._v("：输出进制前缀。")]),s._v(" "),a("li",[a("code",[s._v("0")]),s._v("：填充0，指定宽度内。")]),s._v(" "),a("li",[a("code",[s._v("[num]")]),s._v("：指定宽度，超过不截断，少的用空格填充。")]),s._v(" "),a("li",[a("code",[s._v("*")]),s._v("：待指定宽度，第一个参数为宽度。")]),s._v(" "),a("li",[a("code",[s._v(".[num]")]),s._v("：精度，不够用 0 填充（写入数字最小位数，对于 "),a("code",[s._v("e")]),s._v("、"),a("code",[s._v("f")]),s._v("，指定小数位数。对于 "),a("code",[s._v("s")]),s._v("，指定输出最大字符数。")]),s._v(" "),a("li",[a("code",[s._v(".*")]),s._v("：待指定精度，第一个参数为精度。")])]),s._v(" "),a("h2",{attrs:{id:"_2-23-size-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-23-size-t"}},[s._v("#")]),s._v(" 2.23 size_t")]),s._v(" "),a("p",[a("code",[s._v("sizeof")]),s._v(" 操作符的返回结果类型是 "),a("code",[s._v("size_t")]),s._v("，在程序设计的时候，如果处理 "),a("code",[s._v("size_t")]),s._v(" ，占位符需要为 "),a("code",[s._v("%zu")]),s._v("，如果是 "),a("code",[s._v("ssize_t")]),s._v(" ，则需要用 "),a("code",[s._v("%zd")]),s._v("。")]),s._v(" "),a("p",[a("code",[s._v("size_t")]),s._v(" 表示 C 中任何对象所能达到的最大长度。")]),s._v(" "),a("p",[s._v("在声明注入字符数或者数组索引这样的长度变量时用 "),a("code",[s._v("size_t")]),s._v(" 是最好的做法，它经常用于循环计数器、数组索引。")]),s._v(" "),a("p",[s._v("如：")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("size_t")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("99")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("使用 "),a("code",[s._v("size_t")]),s._v(" 需包含头文件 "),a("code",[s._v("<stddef.h>")])]),s._v(" "),a("h2",{attrs:{id:"_2-24-零长度数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-24-零长度数组"}},[s._v("#")]),s._v(" 2.24 零长度数组 "),a("Badge",{attrs:{text:"TODO",type:"warning"}})],1),s._v(" "),a("h2",{attrs:{id:"_2-25-vlc-变长数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-25-vlc-变长数组"}},[s._v("#")]),s._v(" 2.25 VLC 变长数组")]),s._v(" "),a("p",[s._v("变长数组允许不在栈上，有些编译器可能用 "),a("code",[s._v("malloc")]),s._v(" 实现。")]),s._v(" "),a("p",[s._v("VLA目前在MSVC/GCC上的实现全部都是利用到了alloca() ，在栈上动态申请一块内存（移动栈指针），当函数返回时，栈指针回归外一层函数时的状态，因而alloca() 分配的内存得以释放。")]),s._v(" "),a("p",[s._v("实际工程中不推荐使用VLA。原因如下：若数组长度很大，有造成爆栈的危险。OS给进程的栈的大小是有限的。")]),s._v(" "),a("p",[s._v("使用alloca()后会造成部分与栈操作有关的编译器优化失效。因此，若数组长度有可能很大，请直接在堆上分配避免爆栈。")]),s._v(" "),a("h2",{attrs:{id:"_2-26-关于指针的类型定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-26-关于指针的类型定义"}},[s._v("#")]),s._v(" 2.26 关于指针的类型定义")]),s._v(" "),a("p",[s._v("C 语言里，与变量名最近的符号，表明了这个变量的类型，然后一层层向外增加额外的解释。")]),s._v(" "),a("p",[s._v("如")]),s._v(" "),a("p",[a("code",[s._v("int (*p[10])()")]),s._v(" 是一个函数指针数组，类型是 "),a("code",[s._v("int (*[])()")])]),s._v(" "),a("h2",{attrs:{id:"_2-27-目录结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-27-目录结构"}},[s._v("#")]),s._v(" 2.27 目录结构")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("src")]),s._v(" 项目源代码和编译它的 Makefile 文件。\n"),a("ul",[a("li",[s._v("Makefile")])])]),s._v(" "),a("li",[a("code",[s._v("incl")]),s._v(" 存放头文件。")]),s._v(" "),a("li",[a("code",[s._v("bin")]),s._v(" 存放可执行程序。")]),s._v(" "),a("li",[a("code",[s._v("lib")]),s._v(" 存放库文件。")]),s._v(" "),a("li",[a("code",[s._v("etc")]),s._v(" 存放配置文件。")]),s._v(" "),a("li",[a("code",[s._v("static")]),s._v(" 静态库源文件和编译它的 Makefile文件。\n"),a("ul",[a("li",[s._v("Makefile")])])]),s._v(" "),a("li",[a("code",[s._v("dynamic")]),s._v(" 动态库源文件和编译它的 Makefile 文件。\n"),a("ul",[a("li",[s._v("Makefile")])])]),s._v(" "),a("li",[a("code",[s._v("docs")]),s._v(" 项目文档。")]),s._v(" "),a("li",[a("code",[s._v("obj")]),s._v(" 存放目标文件和 Makefile 文件。\n"),a("ul",[a("li",[s._v("Makefile")])])]),s._v(" "),a("li",[s._v("Makefile")])])])}),[],!1,null,null,null);t.default=v.exports}}]);