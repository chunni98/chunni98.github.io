(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{310:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("Linux使用pthread线程库来管理线程，因此编译的时候需要指定链接选项“-lpthread”，这是一个第三方库，其中“p”表示这个线程库遵循POSIX规范。")]),s._v(" "),t("h2",{attrs:{id:"_3-1-线程基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-线程基础"}},[s._v("#")]),s._v(" 3.1 线程基础")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("线程是内核调度的最小单元，也称作轻量级进程。")])]),s._v(" "),t("li",[t("p",[s._v("每个用户进程都有自己的地址空间。")])]),s._v(" "),t("li",[t("p",[s._v("系统为每个用户进程创建一个 task_struct 来描述进程。")]),s._v(" "),t("ul",[t("li",[s._v("该结构体中包含了一个指针指向该进程的虚拟地址空间映射表")])])]),s._v(" "),t("li",[t("p",[s._v("实际上 task_struct 和地址空间映射表一起用来表示一个进程。")])]),s._v(" "),t("li",[t("p",[s._v("由于进程的地址空间是私有的，因此在进程间上下文切换时，系统开销比较大。")])]),s._v(" "),t("li",[t("p",[s._v("为了提高系统的性能，许多操作系统规范引入了线程概念。")])]),s._v(" "),t("li",[t("p",[s._v("在同一个进程中创建的线程共享该进程的地址空间。")])]),s._v(" "),t("li",[t("p",[s._v("Linux 同样用 task_struct 描述一个线程，线程和进程都参与统一的调度。")])]),s._v(" "),t("li",[t("p",[s._v("通常线程指的是共享相同地址空间的多个任务。")])]),s._v(" "),t("li",[t("p",[s._v("多线程的好处：")]),s._v(" "),t("ul",[t("li",[s._v("大大提高了任务切换的效率。")]),s._v(" "),t("li",[s._v("避免了额外的 TLB & cache 的刷新。")])])]),s._v(" "),t("li",[t("p",[s._v("多线程通过第三方的线程库来实现。")])]),s._v(" "),t("li",[t("p",[s._v("New POSIX Thread Library （NPTL）")]),s._v(" "),t("ul",[t("li",[s._v("早期 Linux  Threads 的改进。")]),s._v(" "),t("li",[s._v("采用 1:1 的线程模型。")]),s._v(" "),t("li",[s._v("显著提高了运行效率。")]),s._v(" "),t("li",[s._v("信号处理效率更高。")])])])]),s._v(" "),t("p",[t("strong",[s._v("多线程共享的资源")])]),s._v(" "),t("ol",[t("li",[s._v("可执行的指令")]),s._v(" "),t("li",[s._v("静态数据")]),s._v(" "),t("li",[s._v("进程中打开的文件描述符")]),s._v(" "),t("li",[s._v("信号处理函数")]),s._v(" "),t("li",[s._v("当前的工作目录")]),s._v(" "),t("li",[s._v("用户 Id")]),s._v(" "),t("li",[s._v("用户组 Id")])]),s._v(" "),t("p",[t("strong",[s._v("多线程私有资源")])]),s._v(" "),t("ol",[t("li",[s._v("线程 ID （tid）")]),s._v(" "),t("li",[s._v("PC（程序计数器）和相关寄存器")]),s._v(" "),t("li",[s._v("堆栈\n"),t("ol",[t("li",[s._v("局部变量")]),s._v(" "),t("li",[s._v("返回地址")])])]),s._v(" "),t("li",[s._v("错误号")]),s._v(" "),t("li",[s._v("信号掩码和优先级")]),s._v(" "),t("li",[s._v("执行状态和属性")])]),s._v(" "),t("h2",{attrs:{id:"_3-2-线程基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-线程基础"}},[s._v("#")]),s._v(" 3.2 线程基础")]),s._v(" "),t("p",[t("strong",[s._v("NPTL线程库")])]),s._v(" "),t("ul",[t("li",[s._v("创建线程")]),s._v(" "),t("li",[s._v("删除线程")]),s._v(" "),t("li",[s._v("控制线程")])]),s._v(" "),t("p",[t("strong",[s._v("线程间同步和互斥机制")])]),s._v(" "),t("ul",[t("li",[s._v("信号量")]),s._v(" "),t("li",[s._v("互斥锁")]),s._v(" "),t("li",[s._v("条件变量")])]),s._v(" "),t("h2",{attrs:{id:"_3-3-多线程编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-多线程编程"}},[s._v("#")]),s._v(" 3.3 多线程编程")]),s._v(" "),t("p",[s._v("编译多线程程序：")]),s._v(" "),t("p",[t("code",[s._v("gcc -o sample sample.c -lpthread -D_REENTRANT")])]),s._v(" "),t("p",[t("code",[s._v("-D_REENTRANT")]),s._v(" 生成可重入代码")]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<pthread.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建线程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_attr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                          "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("start_routine"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  thread:     创建的线程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  attr        线程的属性，NULL 表示使用缺省属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  routine：   线程执行的函数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  arg：       传递给线程执行的函数的参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  返回值：成功 0，失败错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进程回收子线程，阻塞")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_join")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_t")]),s._v(" thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("retval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              thread: 要等待的线程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              retval: 用户定义的指针，用来接收被等待线程结束时的返回值。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              返回值: 成功 0， 失败错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程退出")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_exit")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("retval"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              retval: 线程退出时返回值，可通过 pthread_join 函数接收。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 取消其他的线程")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_cancel")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_t")]),s._v(" thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//          thread: 要取消的线程的标识符")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//          返回值：成功 0， 失败错误码")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("h2",{attrs:{id:"_3-4-线程属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-线程属性"}},[s._v("#")]),s._v(" 3.4 线程属性")]),s._v(" "),t("p",[t("code",[s._v("pthread_attr_t *attr")]),s._v(" 参数即代表线程的属性。线程的常用属性主要为：分离属性、堆栈大小以及调度策略和优先级。")]),s._v(" "),t("p",[s._v("系统默认非分离、1Mb 的堆栈以及和主线程同样的调度策略和相同的优先级。")]),s._v(" "),t("p",[t("strong",[s._v("分离属性")])]),s._v(" "),t("p",[s._v("分离属性是用来决定一个线程何时释放自己的资源。在非分离情况下，当一个线程结束时，它所占用的系统资源并没有释放，也就没有真正终止。只有当\n"),t("code",[s._v("pthread_join()")]),s._v(" 函数返回时，线程才能释放自己占用的系统资源。")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("pthread_attr_init()")]),s._v(" 初始化，设置相应属性。")]),s._v(" "),t("li",[t("code",[s._v("pthread_attr_destroy()")]),s._v(" 进行清理和回收。")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<pthread.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_attr_init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_attr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  attr: 线程属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                  返回值: 成功 0，失败错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_attr_setscope")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_attr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" detachstate"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      attr: 线程属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      detachstate:  PTHREAD_CREATE_JOINABLE 非分离")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                                    PTHREAD_CREATE_DETACHED  分离")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值：成功 0，失败 错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置调度参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_attr_setschedparam")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_attr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sched_param")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("param"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                              attr: 线程属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                              param: 调度参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                              返回值：成功 0，失败非 0 错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取调度参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_attr_getschedparam")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_attr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                      "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sched_param")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("param"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                              attr: 线程属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                              param: 调度参数")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                              返回值：成功 0，失败非 0 错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 清理和回收")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_attr_destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_attr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      attr: 线程属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值: 成功 0，失败 错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程 id")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_self")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 一定成功，返回 线程 tid")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 设置线程为分离属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_detach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_t")]),s._v(" thread"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//pthread_detach() 函数用于分离指定的线程，使其处于分离状态。分离状态的线程资源会在线程结束时自动释放，而不需要调用 pthread_join() 函数。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//调用 pthread_detach() 函数的线程必须与被分离的线程是同一个进程的，否则将返回 EINVAL 错误。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果线程已经处于分离状态，则调用 pthread_detach() 函数将返回 EINVAL 错误。")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//成功执行 pthread_detach() 函数将返回 0，否则返回错误代码。")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br")])]),t("h2",{attrs:{id:"_3-5-线程的同步和互斥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-线程的同步和互斥"}},[s._v("#")]),s._v(" 3.5 线程的同步和互斥")]),s._v(" "),t("ul",[t("li",[s._v("多线程共享同一个进程的地址空间")]),s._v(" "),t("li",[s._v("优点：线程间很容易进行通信（通过全局变量实现数据共享和交换）")]),s._v(" "),t("li",[s._v("缺点：多个线程同时访问共享对象时需要引入同步和互斥机制。")])]),s._v(" "),t("h3",{attrs:{id:"_3-5-1-线程间同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-1-线程间同步"}},[s._v("#")]),s._v(" 3.5.1 线程间同步")]),s._v(" "),t("ul",[t("li",[s._v("同步指的是多个线程按照约定的顺序相互配合完成一件事情。")]),s._v(" "),t("li",[s._v("由信号量来决定线程继续运行还是阻塞等待。")])]),s._v(" "),t("h3",{attrs:{id:"_3-5-2-p-v-操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-2-p-v-操作"}},[s._v("#")]),s._v(" 3.5.2 P/V 操作")]),s._v(" "),t("ul",[t("li",[s._v("信号量代表一类资源，其值表示系统中该资源的数量。")]),s._v(" "),t("li",[s._v("信号量是一个受保护的变量，只能通过三种操作来访问。\n"),t("ul",[t("li",[s._v("初始化")]),s._v(" "),t("li",[s._v("P操作（申请资源）")]),s._v(" "),t("li",[s._v("V操作（释放资源）")])])]),s._v(" "),t("li",[s._v("信号量的值为非负整数。")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("P(S) 含义：\n\nif(信号量的值大于 0) {\n    申请资源的任务继续运行;\n    信号量的值减一;\n} else {\n    申请资源的任务阻塞\n}\n\nV(S) 含义如下：\n\nif(没有任务在等待资源) {\n    信号量的值加一；\n} else {\n    唤醒第一个等待的任务，让其继续运行；\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br")])]),t("h3",{attrs:{id:"_3-5-3-posix-信号量-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-3-posix-信号量-api"}},[s._v("#")]),s._v(" 3.5.3  POSIX 信号量 API")]),s._v(" "),t("p",[s._v("信号量适用于控制一个仅支持有限个用户的共享资源。")]),s._v(" "),t("ul",[t("li",[s._v("POSIX 定义了两种信号量。\n"),t("ul",[t("li",[s._v("无名信号量")]),s._v(" "),t("li",[s._v("有名信号量")])])])]),s._v(" "),t("p",[s._v("常用信号量操作：")]),s._v(" "),t("ol",[t("li",[s._v("初始化")]),s._v(" "),t("li",[s._v("p操作")]),s._v(" "),t("li",[s._v("v操作")]),s._v(" "),t("li",[s._v("获取信号量的值")]),s._v(" "),t("li",[s._v("删除信号量")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<semaphore.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化信号量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sem_init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sem_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" pshared"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unsigned")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              sem: 初始化的信号量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              pshared: 信号量共享的范围（0：线程间使用，非 0: 进程间使用）")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              value: 信号量初值")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//              返回值：成功 0 ，失败 -1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// P 操作，获取信号量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sem_wait")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sem_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 成功 0 ，失败 -1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 若不成功，立即阻塞")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// V 操作，释放信号量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sem_post")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sem_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 成功 0 ， 失败 -1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 删除信号量")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sem_destroy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("sem_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("sem"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 成功 0 ，失败 -1")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h3",{attrs:{id:"_3-5-4-线程间互斥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-4-线程间互斥"}},[s._v("#")]),s._v(" 3.5.4 线程间互斥")]),s._v(" "),t("p",[s._v("引入互斥锁的目的是用来保证共享数据操作的完整性。")]),s._v(" "),t("p",[s._v("互斥锁主要用来保护临界资源，通过简单的加锁方法来保证对共享资源的原子操作。")]),s._v(" "),t("p",[s._v("互斥锁只有两种状态：上锁和解锁，可以把互斥锁看成某种意义上的全局变量。")]),s._v(" "),t("p",[s._v("每个临界资源都由一个互斥锁来保护，任何时刻最多只能有一个线程能访问该资源。")]),s._v(" "),t("p",[s._v("线程必须先获得互斥锁才能访问临界资源，访问完资源后释放该锁。如果无法获得锁，线程会阻塞直到获得锁为止。")]),s._v(" "),t("p",[s._v("互斥锁可以保证每个线程对共享资源按顺序进行原子操作。")]),s._v(" "),t("p",[t("strong",[s._v("POSIX Mutex API")])]),s._v(" "),t("div",{staticClass:"language-c line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-c"}},[t("code",[t("span",{pre:!0,attrs:{class:"token macro property"}},[t("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),t("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("<semaphore.h>")])]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化 互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_mutex_init")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_mutex_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_mutexattr_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("attr"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      mutex: 互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      attr 互斥锁属性// NULL 表示缺省属性")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值：成功 0 失败错误码")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 申请互斥锁，不成功则阻塞，trylock,若不成功则返回")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_mutex_lock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_mutex_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      mutex: 互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值：成功 0，失败-1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//申请互斥锁，若不成功则返回")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_mutex_trylock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_mutex_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      mutex: 互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值：成功 0，失败-1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 释放互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_mutex_unlock")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_mutex_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      mutex: 互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值：成功 0，失败-1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("pthread_mutex_destory")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("pthread_mutex_t")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("mutex"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      mutext: 互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      删除互斥锁")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//                      返回值：成功 0 ，失败 -1")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br")])]),t("h2",{attrs:{id:"_3-6-条件变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-条件变量"}},[s._v("#")]),s._v(" 3.6 条件变量")])])}),[],!1,null,null,null);t.default=e.exports}}]);