(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{311:function(s,t,a){"use strict";a.r(t);var n=a(14),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/fl2011sx/article/details/126242703",target:"_blank",rel:"noopener noreferrer"}},[s._v("C++ 的缺陷与思考"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"std-cin-的返回值是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#std-cin-的返回值是什么"}},[s._v("#")]),s._v(" std::cin 的返回值是什么？")]),s._v(" "),a("p",[s._v("std::cin 是对象，"),a("code",[s._v("operator >>()")]),s._v(" 的返回值类型是 "),a("code",[s._v("istream&")]),s._v(" ，大多数情况下返回 std::cin\n的地址，遇到 EOF 时，返回 0。")]),s._v(" "),a("h2",{attrs:{id:"c-中子类重写父类的虚函数能改变其访问权限吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中子类重写父类的虚函数能改变其访问权限吗"}},[s._v("#")]),s._v(" C++中子类重写父类的虚函数能改变其访问权限吗?")]),s._v(" "),a("p",[s._v("可以。")]),s._v(" "),a("h2",{attrs:{id:"c-中应该怎么样在类内定义常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-中应该怎么样在类内定义常量"}},[s._v("#")]),s._v(" c++ 中应该怎么样在类内定义常量？")]),s._v(" "),a("p",[s._v("类似 "),a("code",[s._v("static const int a = 5;")]),s._v("，只能定义基本类型。")]),s._v(" "),a("h2",{attrs:{id:"函数名是函数的地址吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数名是函数的地址吗"}},[s._v("#")]),s._v(" 函数名是函数的地址吗？")]),s._v(" "),a("p",[s._v("函数名并不是函数地址的代表，这种误解与数组名就是指针一样犯了相同的错误。函数名是函数实体的代表，\n不是地址的代表，当然，你马上就会有疑问，平时我们不都是把函数名作为函数的地址吗？\n是的，我可以告诉你，函数名可以作为函数的地址，但是，绝大多数人都忽略了一个条件，\n从函数到指针的隐式转换是函数名在表达式中的行为，就是说，这个转换仅在表达式中才会发生，\n这仅是函数名众多性质中的一个，而非本质，函数名的本质就是函数实体的代表。")]),s._v(" "),a("p",[s._v("到了C++，由于C++规定，非静态成员函数的左值不可获得，因此非静态成员函数不存在隐式左值转换，\n即不存在像常规函数那样的从函数到指针的隐式转换，所以必须在非静态成员函数前使用&操作符才能获得地址")]),s._v(" "),a("h2",{attrs:{id:"c-函数函数参数该用引用还是指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-函数函数参数该用引用还是指针"}},[s._v("#")]),s._v(" C++ 函数函数参数该用引用还是指针？")]),s._v(" "),a("p",[s._v("通常来说，对于简单类型的参数，可以使用值传递；对于需要修改实参的情况，可以使用指针传递或引用传递；\n对于需要在函数中创建新对象的情况，应该使用指针传递。")]),s._v(" "),a("p",[s._v("参数可能为 "),a("code",[s._v("nullptr")]),s._v(" 的和需要修改指针的才传递指针，否则都使用引用。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/31276547",target:"_blank",rel:"noopener noreferrer"}},[s._v("设计C++函数传参时如何决定使用指针还是引用？"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"在getline之前-如果用了cin输入-getline会无效。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在getline之前-如果用了cin输入-getline会无效。"}},[s._v("#")]),s._v(" 在getline之前，如果用了cin输入，getline会无效。")]),s._v(" "),a("p",[s._v("因为有一个回车键留在了缓冲区，而getline会直接使用这个缓冲区，geline 会读取空白符，所以就会读取 enter 回车并接收。")]),s._v(" "),a("p",[s._v("解决办法是在getline之前用cin.ignore();")]),s._v(" "),a("p",[s._v("cin.ignore()默认不给参数的话，默认参数为cin.ignore(1, EOF)，即把 EOF 前的 1 个字符清掉,没有遇到EOF就清掉一个字符然后结束。")]),s._v(" "),a("p",[s._v("一般可以这样使用："),a("code",[s._v("cin.ignore(1024, '\\n');")]),s._v("，通常把第一个参数设置得足够大，这样实际上是为了只有第二个参数 "),a("code",[s._v("\\n")]),s._v(" 起作用，所以这一句就是把回车（包括回车）之前的所以字符从输入缓冲流中清除出去。")]),s._v(" "),a("p",[s._v("char a = cin.get() 用来获取输入的第一个字符。")]),s._v(" "),a("p",[s._v("cin.get(字符数组名,20)//20指的是输入字符串的个数")]),s._v(" "),a("p",[s._v("getline(cin, xxx) 属于 string 流，cin.getline() 属于 istream 流。")]),s._v(" "),a("h2",{attrs:{id:"c-怎么进行输出格式化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-怎么进行输出格式化"}},[s._v("#")]),s._v(" c++ 怎么进行输出格式化？")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iomanip>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" you "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("200")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" you "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// fixed使用小数计数法(而不是科学计数法)显示浮点数")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// setprecision(4) 小数部分保留4位，最后一位四舍五入")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// setw() 设置输出的总宽度，通常用来对齐显示数据。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// setfill() 数字本身宽度不够，用填充字符填充显示。")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// boolalpha 打印 true/false")]),s._v("\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" fixed "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setprecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setfill")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[s._v("'0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" you "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" boolalpha "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    cout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("precision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h2",{attrs:{id:"派生类和基类有同名函数-派生类怎么调用基类的同名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#派生类和基类有同名函数-派生类怎么调用基类的同名函数"}},[s._v("#")]),s._v(" 派生类和基类有同名函数，派生类怎么调用基类的同名函数？")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Man")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Man man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这样调用。")]),s._v("\n    man"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("h2",{attrs:{id:"怎么在-main-函数之前执行语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么在-main-函数之前执行语句"}},[s._v("#")]),s._v(" 怎么在 main 函数之前执行语句？")]),s._v(" "),a("p",[s._v("C++ 中可以在全局变量的构造函数中实现：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" argc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("argv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h2",{attrs:{id:"qt-中为什么要引入-qvariant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt-中为什么要引入-qvariant"}},[s._v("#")]),s._v(" Qt 中为什么要引入 QVariant？")]),s._v(" "),a("p",[s._v("因为 C++ 禁止联合 union 包含具有非默认构造函数或析构函数的类型：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Greeting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("char")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Greeting")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("union")]),s._v(" _uni "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Greeting  s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 错误")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("uni"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    uni u"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h2",{attrs:{id:"qt6-中怎么替代-qt5-里的-exactmatch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt6-中怎么替代-qt5-里的-exactmatch"}},[s._v("#")]),s._v(" Qt6 中怎么替代 Qt5 里的 exactMatch() ？")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("QRegularExpression "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("regExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QRegularExpression")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("anchoredPattern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("QLatin1String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"(.+)_v(\\\\d+)"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nQRegularExpressionMatch ma "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" regExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("xxx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ma"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hasMatch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/68577160/port-qregexpexactmatch-in-qt6",target:"_blank",rel:"noopener noreferrer"}},[s._v("Port QRegExp::exactMatch() in Qt6"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"函数参数中的数组变量会退化为指针。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数中的数组变量会退化为指针。"}},[s._v("#")]),s._v(" 函数参数中的数组变量会退化为指针。")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bubble_sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等效于")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bubble_sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"为什么需要仿函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要仿函数"}},[s._v("#")]),s._v(" 为什么需要仿函数？")]),s._v(" "),a("p",[s._v("函数对象（仿函数）可以携带附加数据。")]),s._v(" "),a("p",[s._v("如果编程者要将某种“操作”当做算法的参数，一般有两种方法：\n（1）一个办法就是先将该“操作”设计为一个函数，再将函数指针当做算法的一个参数。上面的实例就是该做法；\n（2）将该“操作”设计为一个仿函数（就语言层面而言是个 class），再以该仿函数产生一个对象，并以此对象作为算法的一个参数。")]),s._v(" "),a("p",[s._v("很明显第二种方法会更优秀，因为第一种方法扩展性较差，当函数参数有所变化，则无法兼容旧的代码。在我们写代码时有时会发现有些功能代码，会不断地被使用。为了复用这些代码，实现为一个公共的函数是一个解决方法。不过函数用到的一些变量，可能是公共的全局变量。引入全局变量，容易出现同名冲突，不方便维护。")]),s._v(" "),a("p",[s._v("例子：")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IsGreaterThanThresholdFunctor")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("explicit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("IsGreaterThanThresholdFunctor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("threshold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("bool")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" threshold "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" threshold"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("RecallFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("end"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" IsGreaterThanThresholdFunctor myFunctor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" start"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" end "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t\tcount "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("myFunctor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将判定的阈值也作为一个变量传入")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 普通的函数指针则不能传入变量，只能使用局部变量或者全局变量")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("RecallFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("IsGreaterThanThresholdFunctor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\tcout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h2",{attrs:{id:"push-back-和-emplace-back-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#push-back-和-emplace-back-有什么区别"}},[s._v("#")]),s._v(" push_back 和 emplace_back 有什么区别？")]),s._v(" "),a("p",[s._v("emplace_back() 和 push_back() 的区别，就在于底层实现的机制不同。push_back() 向容器尾部\n添加元素时，首先会创建这个元素，然后再将这个元素拷贝或者移动到容器中（如果是拷贝的话，\n事后会自行销毁先前创建的这个元素）；而 emplace_back() 在实现时，则是直接在容器尾部创建\n这个元素，省去了拷贝或移动元素的过程。")]),s._v(" "),a("p",[s._v("使用emplace_back() 函数可以减少一次拷贝或移动构造的过程，提升容器插入数据的效率。")]),s._v(" "),a("h2",{attrs:{id:"array、vector、数组有什么异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array、vector、数组有什么异同"}},[s._v("#")]),s._v(" array、vector、数组有什么异同？")]),s._v(" "),a("p",[s._v("共同点\n（1.）都和数组相似，都可以使用标准数组的表示方法来访问每个元素（array和vector都对下标运算符[ ]进行了重载）\n（2.）三者的存储都是连续的，可以进行随机访问\n不同点\n（0.）数组是不安全的，array和vector是比较安全的（有效的避免越界等问题）\n（1.）array对象和数组存储在相同的内存区域（栈）中，vector对象存储在自由存储区（堆）\n（2.）array可以将一个对象赋值给另一个array对象，但是数组不行\n（3.）vector属于变长的容器，即可以根据数据的插入和删除重新构造容器容量；但是array和数组属于定长容器\n（4.）vector和array提供了更好的数据访问机制，即可以使用front()和back()以及at()（at()可以避免a[-1]访问越界的问题）访问方式，使得访问更加安全。而数组只能通过下标访问，在写程序中很容易出现越界的错误\n（5.）vector和array提供了更好的遍历机制，即有正向迭代器和反向迭代器\n（6.）vector和array提供了size()和Empty()，而数组只能通过sizeof()/strlen()以及遍历计数来获取大小和是否为空\n（7.）vector和array提供了两个容器对象的内容交换，即swap()的机制，而数组对于交换只能通过遍历的方式逐个交换元素\n（8.）array提供了初始化所有成员的方法fill（）\n（9.）由于vector的动态内存变化的机制，在插入和删除时，需要考虑迭代的是否有效问题\n（10.）vector和array在声明变量后，在声明周期完成后，会自动地释放其所占用的内存。对于数组如果用 new[ ]/malloc 申请的空间，必须用对应的delete[ ]和free来释放内存。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/alidada_blog/article/details/83029438",target:"_blank",rel:"noopener noreferrer"}},[s._v("【C++】array和vector，数组三者区别和联系"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"map-使用-需要-value-有默认构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-使用-需要-value-有默认构造函数"}},[s._v("#")]),s._v(" map 使用 [] 需要 value 有默认构造函数")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<iostream>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<map>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<string>")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("using")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("student")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        string name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("string n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    map"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" student"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 运行时，下面的语句会报错，因为 student 没有默认构造函数。")]),s._v("\n    mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"jack"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("student")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"kate"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" mp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[s._v("map 在编译阶段发现所对应的value不存在，会调用默认构造函数构造一个对象，如果没有，就会报错。")]),s._v(" "),a("h2",{attrs:{id:"该不该写默认构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#该不该写默认构造函数"}},[s._v("#")]),s._v(" 该不该写默认构造函数？")]),s._v(" "),a("p",[s._v("默认构造函数对于成员变量是自定义类型的，调用这个成员变量所在类的默认构造函数初始化，对于成员变量是基本类型的，C++没有规定（可以认为是随机值）。")]),s._v(" "),a("p",[s._v("《More Effective C++》建议，尽量不提供默认构造函数。")]),s._v(" "),a("p",[s._v("添加无意义的默认构造函数会影响效率。")]),s._v(" "),a("p",[s._v("缺乏默认构造函数的缺点：")]),s._v(" "),a("ol",[a("li",[s._v("无法定义数组。")]),s._v(" "),a("li",[s._v("不适用与许多基础模板容器类，如 map 的 "),a("code",[s._v("operator[]")]),s._v("，要求 value 必须有默认构造函数。")]),s._v(" "),a("li",[s._v("虚基类如果没有默认构造函数，则子类无论距离多遥远，必须知道、提供虚基类的构造函数。")])]),s._v(" "),a("h2",{attrs:{id:"模板类怎么进行前向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板类怎么进行前向引用"}},[s._v("#")]),s._v(" 模板类怎么进行前向引用？")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typename")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typename")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Y")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" std "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("_Ty")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("allocator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("template")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("_Ty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("_Alloc")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" allocator"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("_Ty"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("vector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"qstring-和-qbytearray-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qstring-和-qbytearray-有什么区别"}},[s._v("#")]),s._v(" QString 和 QByteArray 有什么区别？")]),s._v(" "),a("p",[s._v("QString是专门用来处理字符串的，除了能处理ASCII编码字符，还包括各国语言的编码，\n默认情况下QString会把所有数据当做utf-8编码来处理。QByteArray只是单纯用来处理数据的，\n除了能处理ASCII编码字符，其它复杂的编码不能处理，直接以字节流的方式来对待。")]),s._v(" "),a("h2",{attrs:{id:"tls-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tls-是什么"}},[s._v("#")]),s._v(" TLS  是什么？")]),s._v(" "),a("p",[s._v("传输层安全性协议（英语：Transport Layer Security，缩写作TLS），及其前身\n安全套接层（Secure Sockets Layer，缩写作SSL）是一种安全协议，目的是为互联网通信提供安全\n及数据完整性保障。网景公司（Netscape）在1994年推出首版网页浏览器，网景导航者时，推出HTTPS协议\n以SSL进行加密，这是SSL的起源。IETF将SSL进行标准化，1999年公布第一版TLS标准文件。随后又公布\nRFC 5246 （2008年8月）与RFC 6176（2011年3月）。在浏览器、邮箱、即时通信、VoIP、网络传真等应用程序中，\n广泛支持这个协议。主要的网站，如Google、Facebook等也以这个协议来创建安全连线，发送数据。\n目前已成为互联网上保密通信的工业标准。")]),s._v(" "),a("p",[s._v("TLS 就是在数据到网络传输之前做了一层安全措施（加密），也就是安全传输层，Transport Layer Security。\n而它的前身SSL，对HTTP协议加了密，变成了HTTPS。")]),s._v(" "),a("p",[s._v("http + ssl = https。")]),s._v(" "),a("h2",{attrs:{id:"qt-无法连接-ssl-动态库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt-无法连接-ssl-动态库"}},[s._v("#")]),s._v(" Qt 无法连接 ssl 动态库")]),s._v(" "),a("p",[s._v("使用 Qt 进行 https 请求，运行时报错：qt.network.ssl: QSslSocket::connectToHostEncrypted: TLS initialization failed")]),s._v(" "),a("p",[s._v("打印")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("qDebug")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QSslSocket")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sslLibraryBuildVersionNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回编译时SSL(静态库)版本号")]),s._v("\n             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QSslSocket")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sslLibraryBuildVersionString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回编译时SSL(静态库)版本字符串")]),s._v("\n             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QSslSocket")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sslLibraryVersionNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回运行时SSL库版本号")]),s._v("\n             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QSslSocket")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sslLibraryVersionString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回运行时SSL库版本字符串")]),s._v("\n             "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QSslSocket")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("supportsSsl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回是否支持SSL true支持/false不支持")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 打印结果：269488255 "OpenSSL 1.1.1g  21 Apr 2020" 0 "" false')]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("可知：Qt 编译时提供了静态库，但是没有提供运行时链接的动态库。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/BadAyase/article/details/103905615",target:"_blank",rel:"noopener noreferrer"}},[s._v("解决qt.network.ssl: QSslSocket::connectToHostEncrypted: TLS initialization failed"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("原因是：")]),s._v(" "),a("p",[s._v("Qt二进制安装包包含了QtNetWork使用的OpenSSL库。不过，它不会自动部署到Qt构建的应用程序中。")]),s._v(" "),a("p",[s._v("美国对软件出口有限制，而 OpenSSL 就是设计加密的开源软件，所以在某些地区使用的时候会有限制。")]),s._v(" "),a("p",[s._v("解决方法是根据打印出来的编译时 ssl 库版本号区下载 ssl 源码自行编译后得到运行时库。")]),s._v(" "),a("p",[s._v("或者直接安装 openssl 库，拷贝 libcrypto-1_1.dll 和libssl-1_1.dll 到运行目录。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/weixin_44916154/article/details/123362461",target:"_blank",rel:"noopener noreferrer"}},[s._v("解决 QT 发送 HTTP 请求时遇到 qt.network.ssl: QSslSocket::connectToHostEncrypted: TLS initialization failed 问题"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"qt是事件驱动的-这句话该怎么理解呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt是事件驱动的-这句话该怎么理解呢"}},[s._v("#")]),s._v(" Qt是事件驱动的，这句话该怎么理解呢？")]),s._v(" "),a("p",[s._v("Qt将系统产生的信号(软件中断)转换成Qt事件，并且将事件封装成类，所有的事件类都是由QEvent派生的，\n事件的产生和处理就是Qt程序的主轴，且伴随着整个程序的运行周期。因此我们说，Qt是事件驱动的。")]),s._v(" "),a("h2",{attrs:{id:"qt事件是由谁接收的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt事件是由谁接收的"}},[s._v("#")]),s._v(" Qt事件是由谁接收的？")]),s._v(" "),a("p",[s._v("答：QObject！它是所有Qt类的基类！是Qt对象模型的核心！QObject类的三大核心功能其中之一\n就是：事件处理。QObject通过event()函数调用获取事件。\n所有的需要处理事件的类都必须继承自Qobject，可以通过重定义event()函数实现自定义事件处理或者将事件交给父类。")]),s._v(" "),a("h2",{attrs:{id:"事件处理的流程是什么样的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件处理的流程是什么样的"}},[s._v("#")]),s._v(" 事件处理的流程是什么样的？")]),s._v(" "),a("p",[s._v("答：事件有别于信号的重要一点：事件是一个类对象具有特定的类型，事件\n多数情况下是被分发到一个队列中(事件队列)，当队列中有事件时就不停的将队列中的事件发送给\nQObject对象，当队列为空时就阻塞地等待事件，这个过程就是事件循环！")]),s._v(" "),a("p",[s._v("QCoreApplication::exec()开启了这种循环，一直到QCoreApplication::exit()被调用才终止，\n所以说事件循环是伴随着Qt程序的整个运行周期。")]),s._v(" "),a("h2",{attrs:{id:"qt-qnetworkaccessmanager出现sslhandshakefailederror-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#qt-qnetworkaccessmanager出现sslhandshakefailederror-问题"}},[s._v("#")]),s._v(" Qt QNetworkAccessManager出现SslHandshakeFailedError 问题")]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[s._v("QSslConfiguration config "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("QSslConfiguration")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("defaultConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setProtocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("QSsl"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("AnyProtocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconfig"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setPeerVerifyMode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("QSslSocket"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("VerifyNone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nrequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setSslConfiguration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/355245557",target:"_blank",rel:"noopener noreferrer"}},[s._v("Qt QNetworkAccessManager出现SslHandshakeFailedError"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"为什么不给你正常打印-unicode-字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不给你正常打印-unicode-字符"}},[s._v("#")]),s._v(" 为什么不给你正常打印 Unicode 字符？")]),s._v(" "),a("p",[s._v("windows 平台使用 UTF-8 with BOM 格式编码，"),a("code",[s._v("*nix")]),s._v(" 平台使用 UTF-8 格式。")]),s._v(" "),a("p",[s._v("「UTF-8」和「带 BOM 的 UTF-8」的区别就是有没有 BOM。即文件开头有没有 U+FEFF。")]),s._v(" "),a("h2",{attrs:{id:"为什么-connect-中的-connect-存在问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么-connect-中的-connect-存在问题"}},[s._v("#")]),s._v(" 为什么 connect 中的 connect 存在问题？")]),s._v(" "),a("p",[s._v("Lambda表达式的引用捕获是在被调用时复制，而值捕获是在Lambda表达式创建时就复制了，\n一定要注意创建和调用之间，被捕获值是否发生了改变。")]),s._v(" "),a("h2",{attrs:{id:"四则运算符的重载为什么不能返回引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四则运算符的重载为什么不能返回引用"}},[s._v("#")]),s._v(" 四则运算符的重载为什么不能返回引用？")]),s._v(" "),a("p",[s._v("这四个操作符没有side effect，因此，它们必须构造一个对象作为返回值。")]),s._v(" "),a("p",[s._v("静态对象的引用因为((a+b) == (c+d))会永远为true而导致错误，所以只能返回一个对象了。")]),s._v(" "),a("h2",{attrs:{id:"结构与联合有和区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构与联合有和区别"}},[s._v("#")]),s._v(" 结构与联合有和区别？")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("结构和联合都是由多个不同的数据类型成员组成, 但在任何同一时刻, 联合中只存放了一个被选中的成员（所有成员共用一块地址空间）, 而结构的所有成员都存在（不同成员的存放地址不同）。")])]),s._v(" "),a("li",[a("p",[s._v("对于联合的不同成员赋值, 将会对其它成员重写, 原来成员的值就不存在了, 而对于结构的不同成员赋值是互不影响的。")])])]),s._v(" "),a("h2",{attrs:{id:"形式参数中定义对象会调用什么构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#形式参数中定义对象会调用什么构造函数"}},[s._v("#")]),s._v(" 形式参数中定义对象会调用什么构造函数？")]),s._v(" "),a("p",[s._v("如果参数是引用传递，则不会调用任何构造函数；如果是按值传递，则调用复制构造函数，按参数的值构造一个\n临时对象，这个临时对象仅仅在函数执行是存在，函数执行结束之后调用析构函数。")]),s._v(" "),a("h2",{attrs:{id:"模板类-函数的定义和实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板类-函数的定义和实现"}},[s._v("#")]),s._v(" 模板类/函数的定义和实现")]),s._v(" "),a("p",[s._v("模板类/函数的定义和实现不能分开写。因为实现文件不会生成模板函数的实例化模板函数，链接会出错。")]),s._v(" "),a("p",[s._v("template 处理的任何东西都意味着编译器当时不为它分配空间，知道模板实例被告知。")]),s._v(" "),a("p",[s._v("最好的方法是在头文件实现。")]),s._v(" "),a("h2",{attrs:{id:"有了虚函数为什么还要引入纯虚函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有了虚函数为什么还要引入纯虚函数"}},[s._v("#")]),s._v(" 有了虚函数为什么还要引入纯虚函数？")]),s._v(" "),a("p",[s._v("有纯虚函数的类是抽象类，不能生成对象，只能派生。它派生的类的纯虚函数没有被改写，那么，它的派生类还是个抽象类。")]),s._v(" "),a("p",[s._v("定义纯虚函数就是为了让基类不可实例化，因为实例化这样的抽象数据结构本身并没有意义，或者给出实现也没有意义。")]),s._v(" "),a("p",[s._v("纯虚函数的引入，是出于两个目的：")]),s._v(" "),a("ol",[a("li",[s._v("为了安全，因为避免任何需要明确但是因为不小心而导致的未知的结果，提醒子类去做应做的实现。")]),s._v(" "),a("li",[s._v("为了效率，不是程序执行的效率，而是为了编码的效率。")])]),s._v(" "),a("h2",{attrs:{id:"什么是-ini-文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-ini-文件"}},[s._v("#")]),s._v(" 什么是 ini 文件？")]),s._v(" "),a("p",[s._v("为什么要用INI文件？如果我们的程序没有任何配置文件时，这样的程序对外是全封闭的，\n一旦程序需要修改一些参数必须要修改程序代码本身并重新编译，这样很不好，所以要用配置文件，\n让程序出厂后还能根据需要进行必要的配置；配置文件有很多，如INI配置文件，XML配置文件，\n还有就是可以使用系统注册表等")]),s._v(" "),a("p",[a("code",[s._v("*.ini")]),s._v("文件是Initialization file的缩写，即为初始化文件，是Windows系统配置文件所采用的\n存储格式，统管Windows的各项配置，一般用户就用Windows提供的各项图形化管理界面就可以实现\n相同的配置了。但在某些情况，还是要直接编辑ini才方便，一般只有很熟悉Windows才能去直接编辑。")]),s._v(" "),a("p",[s._v("“.ini”文件由节、键、值组成，一个.ini”文件通常包括多个节（section），每个节包含不同的键（key）及对应的值（value），用于指定并控制程序的行为。")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/136523050",target:"_blank",rel:"noopener noreferrer"}},[s._v("Github上推荐读写“.ini”配置文件的C语言开源代码库"),a("OutboundLink")],1),s._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/a123441/article/details/90668032",target:"_blank",rel:"noopener noreferrer"}},[s._v("ini配置文件格式"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"vector-和-deque-的差别是"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vector-和-deque-的差别是"}},[s._v("#")]),s._v(" vector 和 deque 的差别是？")]),s._v(" "),a("p",[s._v("本质上vector的遍历性能与随机查找性能是要高于deque，只要对生命周期过长类的成员进行清空操作就不会\n存在问题。避免不了内存占用过大的风险。 友情提醒，vector使用时一定要注意提前分配空间！！")]),s._v(" "),a("p",[s._v("大部分开发人员都是用 vector 替代deque。")]),s._v(" "),a("h2",{attrs:{id:"pod-类型有什么优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-类型有什么优点"}},[s._v("#")]),s._v(" POD 类型有什么优点？")]),s._v(" "),a("ol",[a("li",[s._v("字节赋值。POD类型变量可以不使用构造函数、赋值操作符赋值，直接通过memset()、memcpy()初始化赋值。")]),s._v(" "),a("li",[s._v("兼容C内存布局。C++程序可以和C进行交互，或者可以和其他语言交互。")]),s._v(" "),a("li",[s._v("保证静态初始化安全有效。静态初始化很多时候可以提高程序性能，POD类型初始化更加简单。")])]),s._v(" "),a("div",{staticClass:"language-cpp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typedef")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("typename")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("std")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token base-clause"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("is_pod")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\ncout "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v(" is_pod"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("U"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[s._v("::")]),s._v("value "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<<")]),s._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断是否是 POD 类型。")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"静态初始化和动态初始化的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态初始化和动态初始化的区别是什么"}},[s._v("#")]),s._v(" 静态初始化和动态初始化的区别是什么？")]),s._v(" "),a("p",[s._v("静态初始化:指的是在编译时期就讲某一些对象进行了初始化;")]),s._v(" "),a("p",[s._v("动态初始化:运行的时候才去进行初始化")])])}),[],!1,null,null,null);t.default=e.exports}}]);